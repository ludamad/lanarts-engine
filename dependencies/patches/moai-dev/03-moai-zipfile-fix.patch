diff --git a/src/zl-vfs/ZLVfsZipArchive.cpp b/src/zl-vfs/ZLVfsZipArchive.cpp
index 28f3a3a..e30b67d 100644
--- a/src/zl-vfs/ZLVfsZipArchive.cpp
+++ b/src/zl-vfs/ZLVfsZipArchive.cpp
@@ -31,8 +31,12 @@ int ZLVfsZipArchiveHeader::FindAndRead ( FILE* file ) {
 
 	fseek ( file, 0, SEEK_END );
 	filelen = ftell ( file );
-	
-	cursor = filelen - SCAN_BUFFER_SIZE;
+
+	if (SCAN_BUFFER_SIZE < filelen) {
+		cursor = filelen - SCAN_BUFFER_SIZE;
+	} else {
+		cursor = 4; /* Past first 32bit number */
+	}
 	while ( cursor ) {
 		
 		scansize = (( cursor + SCAN_BUFFER_SIZE ) > filelen ) ? filelen - cursor : SCAN_BUFFER_SIZE;
diff --git a/src/zl-vfs/ZLVfsZipArchive.h b/src/zl-vfs/ZLVfsZipArchive.h
index a6fe907..bb9ee64 100644
--- a/src/zl-vfs/ZLVfsZipArchive.h
+++ b/src/zl-vfs/ZLVfsZipArchive.h
@@ -10,13 +10,13 @@
 class ZLVfsZipArchiveHeader {
 public:
 
-	unsigned long	mSignature;			// 4 End of central directory signature = 0x06054b50
+	unsigned int	mSignature;			// 4 End of central directory signature = 0x06054b50
 	unsigned short	mDiskNumber;		// 2 Number of this disk
 	unsigned short	mStartDisk;			// 2 Disk where central directory starts
 	unsigned short	mTotalDiskEntries;	// 2 Total number of entries on disk
 	unsigned short	mTotalEntries;		// 2 Total number of central in archive
-	unsigned long	mCDSize;			// 4 Size of central directory in bytes
-	unsigned long	mCDAddr;			// 4 Offset of start of central directory, relative to start of archive
+	unsigned int	mCDSize;			// 4 Size of central directory in bytes
+	unsigned int	mCDAddr;			// 4 Offset of start of central directory, relative to start of archive
 	unsigned short	mCommentLength;		// 2 ZIP file comment length
 	
 	//----------------------------------------------------------------//
@@ -29,23 +29,23 @@ public:
 class ZLVfsZipEntryHeader {
 public:
 
-	unsigned long	mSignature;				// 4 Central directory file header signature = 0x02014b50
+	unsigned int	mSignature;				// 4 Central directory file header signature = 0x02014b50
 	unsigned short	mByVersion;				// 2 Version made by
 	unsigned short	mVersionNeeded;			// 2 Version needed to extract (minimum)
 	unsigned short	mFlag;					// 2 General purpose bit flag
 	unsigned short	mCompression;			// 2 Compression method
 	unsigned short	mLastModTime;			// 2 File last modification time
 	unsigned short	mLastModDate;			// 2 File last modification date
-	unsigned long	mCrc32;					// 4 CRC-32
-	unsigned long	mCompressedSize;		// 4 Compressed size
-	unsigned long	mUncompressedSize;		// 4 Uncompressed size
+	unsigned int	mCrc32;					// 4 CRC-32
+	unsigned int	mCompressedSize;		// 4 Compressed size
+	unsigned int	mUncompressedSize;		// 4 Uncompressed size
 	unsigned short	mNameLength;			// 2 File name length (n)
 	unsigned short	mExtraFieldLength;		// 2 Extra field length (m)
 	unsigned short	mCommentLength;			// 2 File comment length (k)
 	unsigned short	mDiskNumber;			// 2 Disk number where file starts
 	unsigned short	mInternalAttributes;	// 2 Internal file attributes
-	unsigned long	mExternalAttributes;	// 4 External file attributes
-	unsigned long	mFileHeaderAddr;		// 4 Relative offset of file header
+	unsigned int	mExternalAttributes;	// 4 External file attributes
+	unsigned int	mFileHeaderAddr;		// 4 Relative offset of file header
 	
 	//----------------------------------------------------------------//
 	int		Read	( FILE* file );
@@ -57,15 +57,15 @@ public:
 class ZLVfsZipFileHeader {
 public:
 
-	unsigned long	mSignature;				// 4	Local file header signature = 0x04034b50 (read as a little-endian number)
+	unsigned int	mSignature;				// 4	Local file header signature = 0x04034b50 (read as a little-endian number)
 	unsigned short	mVersionNeeded;			// 2	Version needed to extract (minimum)
 	unsigned short	mFlag;					// 2	General purpose bit flag
 	unsigned short	mCompression;			// 2	Compression method
 	unsigned short	mLastModTime;			// 2	File last modification time
 	unsigned short	mLastModDate;			// 2	File last modification date
-	unsigned long	mCrc32;					// 4	CRC-32 (*not* to be trusted - Android)
-	unsigned long	mCompressedSize;		// 4	Compressed size (*not* to be trusted - Android)
-	unsigned long	mUncompressedSize;		// 4	Uncompressed size (*not* to be trusted - Android)
+	unsigned int	mCrc32;					// 4	CRC-32 (*not* to be trusted - Android)
+	unsigned int	mCompressedSize;		// 4	Compressed size (*not* to be trusted - Android)
+	unsigned int	mUncompressedSize;		// 4	Uncompressed size (*not* to be trusted - Android)
 	unsigned short	mNameLength;			// 2	File name length
 	unsigned short	mExtraFieldLength;		// 2	Extra field length
 
@@ -80,11 +80,11 @@ class ZLVfsZipFileEntry {
 public:
 
 	std::string		mName;
-	unsigned long	mFileHeaderAddr;
-	unsigned long	mCrc32;
+	unsigned int	mFileHeaderAddr;
+	unsigned int	mCrc32;
 	unsigned short	mCompression;
-	unsigned long	mCompressedSize;
-	unsigned long	mUncompressedSize;
+	unsigned int	mCompressedSize;
+	unsigned int	mUncompressedSize;
 	
 	ZLVfsZipFileEntry*	mNext;
 };
@@ -138,4 +138,4 @@ public:
 							~ZLVfsZipArchive	();
 };
 
-#endif
\ No newline at end of file
+#endif
