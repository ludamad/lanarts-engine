diff --git a/cmake/third-party/luaext/luasocket/CMakeLists.txt b/cmake/third-party/luaext/luasocket/CMakeLists.txt
index 748d49c..0b90829 100644
--- a/cmake/third-party/luaext/luasocket/CMakeLists.txt
+++ b/cmake/third-party/luaext/luasocket/CMakeLists.txt
@@ -33,5 +33,5 @@ project ( luasocket )
   set_target_properties( luasocket PROPERTIES FOLDER Third-Party )
 
    if ( BUILD_WINDOWS )
-     target_link_libraries( luasocket Ws2_32 )
+     target_link_libraries( luasocket ws2_32 )
    endif (BUILD_WINDOWS)
diff --git a/cmake/third-party/luajit/CMakeLists.txt b/cmake/third-party/luajit/CMakeLists.txt
index 9e364df..3f4a687 100644
--- a/cmake/third-party/luajit/CMakeLists.txt
+++ b/cmake/third-party/luajit/CMakeLists.txt
@@ -22,12 +22,13 @@ cmake_minimum_required(VERSION 2.8)
     set (luajit_buildoptions BUILDMODE=static)
     set (luajit_copt "")
     if (CMAKE_BUILD_TYPE STREQUAL "Debug")
-        set (luajit_buildoptions ${luajit_buildoptions} CCDEBUG=${CC_DEBUG_OPT})
-        set (luajit_copt ${luajit_copt} -O1)
+        #set (luajit_buildoptions ${luajit_buildoptions} CCDEBUG=-ggdb)
+        set (luajit_copt ${luajit_copt} -g)
         set (luajit_buildoptions ${luajit_buildoptions} XCFLAGS="-DLUA_USE_APICHECK -DLUA_USE_ASSERT")
     else ()
         set (luajit_copt ${luajit_copt} -O2)
     endif()
+
     #set (luajit_copt ${luajit_copt} -I${PROJECT_SOURCE_DIR}/libobjc)
 
 
@@ -60,7 +61,7 @@ cmake_minimum_required(VERSION 2.8)
     endif(GCC_FORCE_32BIT)
 
 
-    if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL ${CMAKE_HOST_SYSTEM_PROCESSOR})
+    if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL ${CMAKE_HOST_SYSTEM_PROCESSOR})
         # Regular mode - use CMake compiler for building host utils.
         set (luajit_host_cc ${CMAKE_C_COMPILER})
         set (luajit_host_ldflags ${luajit_target_ldflags} )
@@ -69,11 +70,11 @@ cmake_minimum_required(VERSION 2.8)
         # Since CMake does not support cross compilation properly
         # we have to use system CC here.
         
+         set (luajit_buildoptions ${luajit_buildoptions} CROSS='i686-w64-mingw32-' TARGET_SYS="Windows")
           set (luajit_host_cc "gcc")
     endif()
     
 
-    message( "Size of void P =  ${CMAKE_SIZEOF_VOID_P} and ${CMAKE_HOST_SYSTEM_PROCESSOR}")
     if (${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "64" AND
             ${CMAKE_SIZEOF_VOID_P} EQUAL 4 OR GCC_FORCE_32BIT)
         # The host compiler must have same pointer size as the target compiler.
@@ -160,7 +161,7 @@ cmake_minimum_required(VERSION 2.8)
     else()
         add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/luajit/src/libluajit.a
             WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/luajit/src
-            COMMAND $(MAKE) VERBOSE=1 clean ${luajit_buildoptions}
+#            COMMAND $(MAKE) VERBOSE=1 clean ${luajit_buildoptions}
             COMMAND $(MAKE) VERBOSE=1 ${luajit_buildoptions} libluajit.a
             DEPENDS  ${CMAKE_CURRENT_BINARY_DIR}/luajit 
         ) 
@@ -178,4 +179,4 @@ cmake_minimum_required(VERSION 2.8)
    # add_dependencies(liblua-static libluajit)
 
    set( LUA_HEADERS ${LUAJIT_INCLUDE}  PARENT_SCOPE)
-    
\ No newline at end of file
+    
