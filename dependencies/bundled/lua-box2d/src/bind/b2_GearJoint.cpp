/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2GearJoint
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/Joints/b2GearJoint.h"


/** ~b2GearJoint()
 * 
 */
static int b2GearJoint__b2GearJoint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.GearJoint"));
    if (userdata->gc) {
      b2GearJoint *self = (b2GearJoint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2GearJoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2GearJoint: Unknown exception");
  }
  return dub_error(L);
}

/** Cast (class_name)
 * 
 */
static int b2GearJoint__cast_(lua_State *L) {

  b2GearJoint *self = *((b2GearJoint **)dub_checksdata_n(L, 1, "b2.GearJoint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.Joint")) break;
      *retval__ = static_cast<b2Joint *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2Vec2 b2GearJoint::GetAnchorA() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:59
 */
static int b2GearJoint_GetAnchorA(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2GearJoint::GetAnchorB() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:60
 */
static int b2GearJoint_GetAnchorB(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2GearJoint::GetReactionForce(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:62
 */
static int b2GearJoint_GetReactionForce(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    dub_pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2GearJoint::GetReactionTorque(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:63
 */
static int b2GearJoint_GetReactionTorque(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint* b2GearJoint::GetJoint1()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:66
 */
static int b2GearJoint_GetJoint1(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    b2Joint *retval__ = self->GetJoint1();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJoint1: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJoint1: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint* b2GearJoint::GetJoint2()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:69
 */
static int b2GearJoint_GetJoint2(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    b2Joint *retval__ = self->GetJoint2();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJoint2: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJoint2: Unknown exception");
  }
  return dub_error(L);
}

/** void b2GearJoint::SetRatio(float32 ratio)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:72
 */
static int b2GearJoint_SetRatio(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    float32 ratio = dub_checknumber(L, 2);
    self->SetRatio(ratio);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetRatio: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2GearJoint::GetRatio() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:73
 */
static int b2GearJoint_GetRatio(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    lua_pushnumber(L, self->GetRatio());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetRatio: Unknown exception");
  }
  return dub_error(L);
}

/** void b2GearJoint::Dump()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2GearJoint.h:76
 */
static int b2GearJoint_Dump(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub_error(L);
}

/** b2JointType b2Joint::GetType() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:109
 */
static int b2GearJoint_GetType(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:112
 */
static int b2GearJoint_GetBodyA(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:115
 */
static int b2GearJoint_GetBodyB(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint * b2Joint::GetNext()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:130
 */
static int b2GearJoint_GetNext(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub_error(L);
}

/** void * b2Joint::GetUserData() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:134
 */
static int b2GearJoint_GetUserData(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** void b2Joint::SetUserData(void *data)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:137
 */
static int b2GearJoint_SetUserData(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    void *data = *((void **)dub_checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::IsActive() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:140
 */
static int b2GearJoint_IsActive(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:145
 */
static int b2GearJoint_GetCollideConnected(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void b2Joint::ShiftOrigin(const b2Vec2 &newOrigin)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:151
 */
static int b2GearJoint_ShiftOrigin(lua_State *L) {
  try {
    b2GearJoint *self = *((b2GearJoint **)dub_checksdata(L, 1, "b2.GearJoint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2GearJoint___tostring(lua_State *L) {
  b2GearJoint *self = *((b2GearJoint **)dub_checksdata_n(L, 1, "b2.GearJoint"));
  lua_pushfstring(L, "b2.GearJoint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2GearJoint_member_methods[] = {
  { "__gc"         , b2GearJoint__b2GearJoint },
  { "_cast_"       , b2GearJoint__cast_   },
  { "GetAnchorA"   , b2GearJoint_GetAnchorA },
  { "GetAnchorB"   , b2GearJoint_GetAnchorB },
  { "GetReactionForce", b2GearJoint_GetReactionForce },
  { "GetReactionTorque", b2GearJoint_GetReactionTorque },
  { "GetJoint1"    , b2GearJoint_GetJoint1 },
  { "GetJoint2"    , b2GearJoint_GetJoint2 },
  { "SetRatio"     , b2GearJoint_SetRatio },
  { "GetRatio"     , b2GearJoint_GetRatio },
  { "Dump"         , b2GearJoint_Dump     },
  { "GetType"      , b2GearJoint_GetType  },
  { "GetBodyA"     , b2GearJoint_GetBodyA },
  { "GetBodyB"     , b2GearJoint_GetBodyB },
  { "GetNext"      , b2GearJoint_GetNext  },
  { "GetUserData"  , b2GearJoint_GetUserData },
  { "SetUserData"  , b2GearJoint_SetUserData },
  { "IsActive"     , b2GearJoint_IsActive },
  { "GetCollideConnected", b2GearJoint_GetCollideConnected },
  { "ShiftOrigin"  , b2GearJoint_ShiftOrigin },
  { "__tostring"   , b2GearJoint___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_GearJoint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.GearJoint");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2GearJoint_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "GearJoint", "GearJoint");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
