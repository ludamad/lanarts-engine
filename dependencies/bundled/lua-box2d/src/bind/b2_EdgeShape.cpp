/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2EdgeShape
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Collision/Shapes/b2EdgeShape.h"


/** ~b2EdgeShape()
 * 
 */
static int b2EdgeShape__b2EdgeShape(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.EdgeShape"));
    if (userdata->gc) {
      b2EdgeShape *self = (b2EdgeShape *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2EdgeShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2EdgeShape: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2EdgeShape__set_(lua_State *L) {

  b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata_n(L, 1, "b2.EdgeShape"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 14);
  switch(key_h) {
    case 9: {
      if (DUB_ASSERT_KEY(key, "m_vertex1")) break;
      self->m_vertex1 = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 10: {
      if (DUB_ASSERT_KEY(key, "m_vertex2")) break;
      self->m_vertex2 = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 8: {
      if (DUB_ASSERT_KEY(key, "m_vertex0")) break;
      self->m_vertex0 = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 11: {
      if (DUB_ASSERT_KEY(key, "m_vertex3")) break;
      self->m_vertex3 = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "m_hasVertex0")) break;
      self->m_hasVertex0 = luaL_checkboolean(L, 3);
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "m_hasVertex3")) break;
      self->m_hasVertex3 = luaL_checkboolean(L, 3);
      return 0;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "m_type")) break;
      self->m_type = (b2Shape::Type)luaL_checkint(L, 3);
      return 0;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "m_radius")) break;
      self->m_radius = luaL_checknumber(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2EdgeShape__get_(lua_State *L) {

  b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata_n(L, 1, "b2.EdgeShape", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 14);
  switch(key_h) {
    case 9: {
      if (DUB_ASSERT_KEY(key, "m_vertex1")) break;
      dub_pushudata(L, &self->m_vertex1, "b2.Vec2", false);
      return 1;
    }
    case 10: {
      if (DUB_ASSERT_KEY(key, "m_vertex2")) break;
      dub_pushudata(L, &self->m_vertex2, "b2.Vec2", false);
      return 1;
    }
    case 8: {
      if (DUB_ASSERT_KEY(key, "m_vertex0")) break;
      dub_pushudata(L, &self->m_vertex0, "b2.Vec2", false);
      return 1;
    }
    case 11: {
      if (DUB_ASSERT_KEY(key, "m_vertex3")) break;
      dub_pushudata(L, &self->m_vertex3, "b2.Vec2", false);
      return 1;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "m_hasVertex0")) break;
      lua_pushboolean(L, self->m_hasVertex0);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "m_hasVertex3")) break;
      lua_pushboolean(L, self->m_hasVertex3);
      return 1;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "m_type")) break;
      lua_pushnumber(L, self->m_type);
      return 1;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "m_radius")) break;
      lua_pushnumber(L, self->m_radius);
      return 1;
    }
  }
  return 0;
}

/** Cast (class_name)
 * 
 */
static int b2EdgeShape__cast_(lua_State *L) {

  b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata_n(L, 1, "b2.EdgeShape"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "b2.Shape")) break;
      *retval__ = static_cast<b2Shape *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2EdgeShape::b2EdgeShape()
 * vendor/Box2D/Box2D/Collision/Shapes/b2EdgeShape.h:30
 */
static int b2EdgeShape_b2EdgeShape(lua_State *L) {
  try {
    b2EdgeShape *retval__ = new b2EdgeShape();
    dub_pushudata(L, retval__, "b2.EdgeShape", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2EdgeShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2EdgeShape: Unknown exception");
  }
  return dub_error(L);
}

/** void b2EdgeShape::Set(const b2Vec2 &v1, const b2Vec2 &v2)
 * vendor/Box2D/Box2D/Collision/Shapes/b2EdgeShape.h:33
 */
static int b2EdgeShape_Set(lua_State *L) {
  try {
    b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata(L, 1, "b2.EdgeShape"));
    b2Vec2 *v1 = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    b2Vec2 *v2 = *((b2Vec2 **)dub_checksdata(L, 3, "b2.Vec2"));
    self->Set(*v1, *v2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Set: Unknown exception");
  }
  return dub_error(L);
}

/** b2Shape * b2EdgeShape::Clone(b2BlockAllocator *allocator) const
 * vendor/Box2D/Box2D/Collision/Shapes/b2EdgeShape.h:36
 */
static int b2EdgeShape_Clone(lua_State *L) {
  try {
    b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata(L, 1, "b2.EdgeShape"));
    b2BlockAllocator *allocator = *((b2BlockAllocator **)dub_checksdata(L, 2, "b2.BlockAllocator"));
    b2Shape *retval__ = self->Clone(allocator);
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Shape", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Clone: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Clone: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2EdgeShape::GetChildCount() const
 * vendor/Box2D/Box2D/Collision/Shapes/b2EdgeShape.h:39
 */
static int b2EdgeShape_GetChildCount(lua_State *L) {
  try {
    b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata(L, 1, "b2.EdgeShape"));
    lua_pushnumber(L, self->GetChildCount());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetChildCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetChildCount: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2EdgeShape::TestPoint(const b2Transform &transform, const b2Vec2 &p) const
 * vendor/Box2D/Box2D/Collision/Shapes/b2EdgeShape.h:42
 */
static int b2EdgeShape_TestPoint(lua_State *L) {
  try {
    b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata(L, 1, "b2.EdgeShape"));
    b2Transform *transform = *((b2Transform **)dub_checksdata(L, 2, "b2.Transform"));
    b2Vec2 *p = *((b2Vec2 **)dub_checksdata(L, 3, "b2.Vec2"));
    lua_pushboolean(L, self->TestPoint(*transform, *p));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "TestPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "TestPoint: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2EdgeShape::RayCast(b2RayCastOutput *output, const b2RayCastInput &input, const b2Transform &transform, int32 childIndex) const
 * vendor/Box2D/Box2D/Collision/Shapes/b2EdgeShape.h:46
 */
static int b2EdgeShape_RayCast(lua_State *L) {
  try {
    b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata(L, 1, "b2.EdgeShape"));
    b2RayCastOutput *output = *((b2RayCastOutput **)dub_checksdata(L, 2, "b2.RayCastOutput"));
    b2RayCastInput *input = *((b2RayCastInput **)dub_checksdata(L, 3, "b2.RayCastInput"));
    b2Transform *transform = *((b2Transform **)dub_checksdata(L, 4, "b2.Transform"));
    int32 childIndex = dub_checkint(L, 5);
    lua_pushboolean(L, self->RayCast(output, *input, *transform, childIndex));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "RayCast: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "RayCast: Unknown exception");
  }
  return dub_error(L);
}

/** void b2EdgeShape::ComputeAABB(b2AABB *aabb, const b2Transform &transform, int32 childIndex) const
 * vendor/Box2D/Box2D/Collision/Shapes/b2EdgeShape.h:49
 */
static int b2EdgeShape_ComputeAABB(lua_State *L) {
  try {
    b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata(L, 1, "b2.EdgeShape"));
    b2AABB *aabb = *((b2AABB **)dub_checksdata(L, 2, "b2.AABB"));
    b2Transform *transform = *((b2Transform **)dub_checksdata(L, 3, "b2.Transform"));
    int32 childIndex = dub_checkint(L, 4);
    self->ComputeAABB(aabb, *transform, childIndex);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ComputeAABB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ComputeAABB: Unknown exception");
  }
  return dub_error(L);
}

/** void b2EdgeShape::ComputeMass(b2MassData *massData, float32 density) const
 * vendor/Box2D/Box2D/Collision/Shapes/b2EdgeShape.h:52
 */
static int b2EdgeShape_ComputeMass(lua_State *L) {
  try {
    b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata(L, 1, "b2.EdgeShape"));
    b2MassData *massData = *((b2MassData **)dub_checksdata(L, 2, "b2.MassData"));
    float32 density = dub_checknumber(L, 3);
    self->ComputeMass(massData, density);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ComputeMass: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ComputeMass: Unknown exception");
  }
  return dub_error(L);
}

/** b2Shape::Type b2Shape::GetType() const
 * vendor/Box2D/Box2D/Collision/Shapes/b2Shape.h:62
 */
static int b2EdgeShape_GetType(lua_State *L) {
  try {
    b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata(L, 1, "b2.EdgeShape"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2EdgeShape___tostring(lua_State *L) {
  b2EdgeShape *self = *((b2EdgeShape **)dub_checksdata_n(L, 1, "b2.EdgeShape"));
  lua_pushfstring(L, "b2.EdgeShape: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2EdgeShape_member_methods[] = {
  { "__gc"         , b2EdgeShape__b2EdgeShape },
  { "__newindex"   , b2EdgeShape__set_    },
  { "__index"      , b2EdgeShape__get_    },
  { "_cast_"       , b2EdgeShape__cast_   },
  { "new"          , b2EdgeShape_b2EdgeShape },
  { "Set"          , b2EdgeShape_Set      },
  { "Clone"        , b2EdgeShape_Clone    },
  { "GetChildCount", b2EdgeShape_GetChildCount },
  { "TestPoint"    , b2EdgeShape_TestPoint },
  { "RayCast"      , b2EdgeShape_RayCast  },
  { "ComputeAABB"  , b2EdgeShape_ComputeAABB },
  { "ComputeMass"  , b2EdgeShape_ComputeMass },
  { "GetType"      , b2EdgeShape_GetType  },
  { "__tostring"   , b2EdgeShape___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_EdgeShape(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.EdgeShape");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2EdgeShape_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "EdgeShape", "EdgeShape");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
