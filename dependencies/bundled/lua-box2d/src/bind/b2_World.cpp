/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2World
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/b2World.h"


/** b2World::b2World(const b2Vec2 &gravity)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:46
 */
static int b2World_b2World(lua_State *L) {
  try {
    b2Vec2 *gravity = *((b2Vec2 **)dub_checksdata(L, 1, "b2.Vec2"));
    b2World *retval__ = new b2World(*gravity);
    dub_pushudata(L, retval__, "b2.World", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2World: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2World: Unknown exception");
  }
  return dub_error(L);
}

/** b2World::~b2World()
 * vendor/Box2D/Box2D/Dynamics/b2World.h:49
 */
static int b2World__b2World(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.World"));
    if (userdata->gc) {
      b2World *self = (b2World *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2World: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2World: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetDestructionListener(b2DestructionListener *listener)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:53
 */
static int b2World_SetDestructionListener(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2DestructionListener *listener = *((b2DestructionListener **)dub_checksdata(L, 2, "b2.DestructionListener"));
    self->SetDestructionListener(listener);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetDestructionListener: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetDestructionListener: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetContactFilter(b2ContactFilter *filter)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:58
 */
static int b2World_SetContactFilter(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2ContactFilter *filter = *((b2ContactFilter **)dub_checksdata(L, 2, "b2.ContactFilter"));
    self->SetContactFilter(filter);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetContactFilter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetContactFilter: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetContactListener(b2ContactListener *listener)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:62
 */
static int b2World_SetContactListener(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2ContactListener *listener = *((b2ContactListener **)dub_checksdata(L, 2, "b2.ContactListener"));
    self->SetContactListener(listener);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetContactListener: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetContactListener: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetDebugDraw(b2Draw *debugDraw)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:67
 */
static int b2World_SetDebugDraw(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2Draw *debugDraw = *((b2Draw **)dub_checksdata(L, 2, "b2.Draw"));
    self->SetDebugDraw(debugDraw);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetDebugDraw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetDebugDraw: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2World::CreateBody(const b2BodyDef *def)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:72
 */
static int b2World_CreateBody(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2BodyDef *def = *((b2BodyDef **)dub_checksdata(L, 2, "b2.BodyDef"));
    b2Body *retval__ = self->CreateBody(def);
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "CreateBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "CreateBody: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::DestroyBody(b2Body *body)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:78
 */
static int b2World_DestroyBody(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2Body *body = *((b2Body **)dub_checksdata(L, 2, "b2.Body"));
    self->DestroyBody(body);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DestroyBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DestroyBody: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint * b2World::CreateJoint(const b2JointDef *def)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:83
 */
static int b2World_CreateJoint(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2JointDef *def = *((b2JointDef **)dub_checksdata(L, 2, "b2.JointDef"));
    b2Joint *retval__ = self->CreateJoint(def);
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "CreateJoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "CreateJoint: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::DestroyJoint(b2Joint *joint)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:87
 */
static int b2World_DestroyJoint(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2Joint *joint = *((b2Joint **)dub_checksdata(L, 2, "b2.Joint"));
    self->DestroyJoint(joint);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DestroyJoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DestroyJoint: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::Step(float32 timeStep, int32 velocityIterations, int32 positionIterations)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:96
 */
static int b2World_Step(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    float32 timeStep = dub_checknumber(L, 2);
    int32 velocityIterations = dub_checkint(L, 3);
    int32 positionIterations = dub_checkint(L, 4);
    self->Step(timeStep, velocityIterations, positionIterations);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Step: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Step: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::ClearForces()
 * vendor/Box2D/Box2D/Dynamics/b2World.h:105
 */
static int b2World_ClearForces(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    self->ClearForces();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ClearForces: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ClearForces: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::DrawDebugData()
 * vendor/Box2D/Box2D/Dynamics/b2World.h:108
 */
static int b2World_DrawDebugData(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    self->DrawDebugData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DrawDebugData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DrawDebugData: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::QueryAABB(b2QueryCallback *callback, const b2AABB &aabb) const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:114
 */
static int b2World_QueryAABB(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2QueryCallback *callback = *((b2QueryCallback **)dub_checksdata(L, 2, "b2.QueryCallback"));
    b2AABB *aabb = *((b2AABB **)dub_checksdata(L, 3, "b2.AABB"));
    self->QueryAABB(callback, *aabb);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "QueryAABB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "QueryAABB: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::RayCast(b2RayCastCallback *callback, const b2Vec2 &point1, const b2Vec2 &point2) const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:122
 */
static int b2World_RayCast(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2RayCastCallback *callback = *((b2RayCastCallback **)dub_checksdata(L, 2, "b2.RayCastCallback"));
    b2Vec2 *point1 = *((b2Vec2 **)dub_checksdata(L, 3, "b2.Vec2"));
    b2Vec2 *point2 = *((b2Vec2 **)dub_checksdata(L, 4, "b2.Vec2"));
    self->RayCast(callback, *point1, *point2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "RayCast: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "RayCast: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2World::GetBodyList()
 * vendor/Box2D/Box2D/Dynamics/b2World.h:127
 */
static int b2World_GetBodyList(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2Body *retval__ = self->GetBodyList();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyList: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyList: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint * b2World::GetJointList()
 * vendor/Box2D/Box2D/Dynamics/b2World.h:133
 */
static int b2World_GetJointList(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2Joint *retval__ = self->GetJointList();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJointList: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJointList: Unknown exception");
  }
  return dub_error(L);
}

/** b2Contact * b2World::GetContactList()
 * vendor/Box2D/Box2D/Dynamics/b2World.h:141
 */
static int b2World_GetContactList(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2Contact *retval__ = self->GetContactList();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "Contact", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetContactList: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetContactList: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetAllowSleeping(bool flag)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:145
 */
static int b2World_SetAllowSleeping(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    bool flag = dub_checkboolean(L, 2);
    self->SetAllowSleeping(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetAllowSleeping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetAllowSleeping: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2World::GetAllowSleeping() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:146
 */
static int b2World_GetAllowSleeping(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushboolean(L, self->GetAllowSleeping());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAllowSleeping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAllowSleeping: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetWarmStarting(bool flag)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:149
 */
static int b2World_SetWarmStarting(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    bool flag = dub_checkboolean(L, 2);
    self->SetWarmStarting(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetWarmStarting: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetWarmStarting: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2World::GetWarmStarting() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:150
 */
static int b2World_GetWarmStarting(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushboolean(L, self->GetWarmStarting());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetWarmStarting: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetWarmStarting: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetContinuousPhysics(bool flag)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:153
 */
static int b2World_SetContinuousPhysics(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    bool flag = dub_checkboolean(L, 2);
    self->SetContinuousPhysics(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetContinuousPhysics: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetContinuousPhysics: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2World::GetContinuousPhysics() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:154
 */
static int b2World_GetContinuousPhysics(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushboolean(L, self->GetContinuousPhysics());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetContinuousPhysics: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetContinuousPhysics: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetSubStepping(bool flag)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:157
 */
static int b2World_SetSubStepping(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    bool flag = dub_checkboolean(L, 2);
    self->SetSubStepping(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetSubStepping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetSubStepping: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2World::GetSubStepping() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:158
 */
static int b2World_GetSubStepping(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushboolean(L, self->GetSubStepping());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetSubStepping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetSubStepping: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2World::GetProxyCount() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:161
 */
static int b2World_GetProxyCount(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushnumber(L, self->GetProxyCount());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetProxyCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetProxyCount: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2World::GetBodyCount() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:164
 */
static int b2World_GetBodyCount(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushnumber(L, self->GetBodyCount());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyCount: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2World::GetJointCount() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:167
 */
static int b2World_GetJointCount(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushnumber(L, self->GetJointCount());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJointCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJointCount: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2World::GetContactCount() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:170
 */
static int b2World_GetContactCount(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushnumber(L, self->GetContactCount());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetContactCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetContactCount: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2World::GetTreeHeight() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:173
 */
static int b2World_GetTreeHeight(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushnumber(L, self->GetTreeHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetTreeHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetTreeHeight: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2World::GetTreeBalance() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:176
 */
static int b2World_GetTreeBalance(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushnumber(L, self->GetTreeBalance());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetTreeBalance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetTreeBalance: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2World::GetTreeQuality() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:180
 */
static int b2World_GetTreeQuality(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushnumber(L, self->GetTreeQuality());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetTreeQuality: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetTreeQuality: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetGravity(const b2Vec2 &gravity)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:183
 */
static int b2World_SetGravity(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2Vec2 *gravity = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    self->SetGravity(*gravity);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetGravity: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2World::GetGravity() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:186
 */
static int b2World_GetGravity(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    dub_pushudata(L, new b2Vec2(self->GetGravity()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetGravity: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2World::IsLocked() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:189
 */
static int b2World_IsLocked(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushboolean(L, self->IsLocked());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsLocked: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsLocked: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::SetAutoClearForces(bool flag)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:192
 */
static int b2World_SetAutoClearForces(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    bool flag = dub_checkboolean(L, 2);
    self->SetAutoClearForces(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetAutoClearForces: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetAutoClearForces: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2World::GetAutoClearForces() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:195
 */
static int b2World_GetAutoClearForces(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    lua_pushboolean(L, self->GetAutoClearForces());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAutoClearForces: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAutoClearForces: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::ShiftOrigin(const b2Vec2 &newOrigin)
 * vendor/Box2D/Box2D/Dynamics/b2World.h:200
 */
static int b2World_ShiftOrigin(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub_error(L);
}

/** const b2ContactManager & b2World::GetContactManager() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:203
 */
static int b2World_GetContactManager(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    dub_pushudata(L, const_cast<b2ContactManager*>(&self->GetContactManager()), "b2.ContactManager", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetContactManager: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetContactManager: Unknown exception");
  }
  return dub_error(L);
}

/** const b2Profile & b2World::GetProfile() const
 * vendor/Box2D/Box2D/Dynamics/b2World.h:206
 */
static int b2World_GetProfile(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    dub_pushudata(L, const_cast<b2Profile*>(&self->GetProfile()), "b2.Profile", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetProfile: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetProfile: Unknown exception");
  }
  return dub_error(L);
}

/** void b2World::Dump()
 * vendor/Box2D/Box2D/Dynamics/b2World.h:210
 */
static int b2World_Dump(lua_State *L) {
  try {
    b2World *self = *((b2World **)dub_checksdata(L, 1, "b2.World"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2World___tostring(lua_State *L) {
  b2World *self = *((b2World **)dub_checksdata_n(L, 1, "b2.World"));
  lua_pushfstring(L, "b2.World: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2World_member_methods[] = {
  { "new"          , b2World_b2World      },
  { "__gc"         , b2World__b2World     },
  { "SetDestructionListener", b2World_SetDestructionListener },
  { "SetContactFilter", b2World_SetContactFilter },
  { "SetContactListener", b2World_SetContactListener },
  { "SetDebugDraw" , b2World_SetDebugDraw },
  { "CreateBody"   , b2World_CreateBody   },
  { "DestroyBody"  , b2World_DestroyBody  },
  { "CreateJoint"  , b2World_CreateJoint  },
  { "DestroyJoint" , b2World_DestroyJoint },
  { "Step"         , b2World_Step         },
  { "ClearForces"  , b2World_ClearForces  },
  { "DrawDebugData", b2World_DrawDebugData },
  { "QueryAABB"    , b2World_QueryAABB    },
  { "RayCast"      , b2World_RayCast      },
  { "GetBodyList"  , b2World_GetBodyList  },
  { "GetJointList" , b2World_GetJointList },
  { "GetContactList", b2World_GetContactList },
  { "SetAllowSleeping", b2World_SetAllowSleeping },
  { "GetAllowSleeping", b2World_GetAllowSleeping },
  { "SetWarmStarting", b2World_SetWarmStarting },
  { "GetWarmStarting", b2World_GetWarmStarting },
  { "SetContinuousPhysics", b2World_SetContinuousPhysics },
  { "GetContinuousPhysics", b2World_GetContinuousPhysics },
  { "SetSubStepping", b2World_SetSubStepping },
  { "GetSubStepping", b2World_GetSubStepping },
  { "GetProxyCount", b2World_GetProxyCount },
  { "GetBodyCount" , b2World_GetBodyCount },
  { "GetJointCount", b2World_GetJointCount },
  { "GetContactCount", b2World_GetContactCount },
  { "GetTreeHeight", b2World_GetTreeHeight },
  { "GetTreeBalance", b2World_GetTreeBalance },
  { "GetTreeQuality", b2World_GetTreeQuality },
  { "SetGravity"   , b2World_SetGravity   },
  { "GetGravity"   , b2World_GetGravity   },
  { "IsLocked"     , b2World_IsLocked     },
  { "SetAutoClearForces", b2World_SetAutoClearForces },
  { "GetAutoClearForces", b2World_GetAutoClearForces },
  { "ShiftOrigin"  , b2World_ShiftOrigin  },
  { "GetContactManager", b2World_GetContactManager },
  { "GetProfile"   , b2World_GetProfile   },
  { "Dump"         , b2World_Dump         },
  { "__tostring"   , b2World___tostring   },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_World(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.World");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2World_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "World", "World");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
