/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2FixtureProxy
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/b2Fixture.h"


/** Set attributes (key, value)
 * 
 */
static int b2FixtureProxy__set_(lua_State *L) {

  b2FixtureProxy *self = *((b2FixtureProxy **)dub_checksdata_n(L, 1, "b2.FixtureProxy"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 10);
  switch(key_h) {
    case 6: {
      if (DUB_ASSERT_KEY(key, "aabb")) break;
      self->aabb = **((b2AABB **)dub_checksdata_n(L, 3, "b2.AABB"));
      return 0;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "fixture")) break;
      dub_protect(L, 1, 3, "fixture");
      self->fixture = *((b2Fixture **)dub_checksdata_n(L, 3, "b2.Fixture"));
      return 0;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "childIndex")) break;
      self->childIndex = luaL_checkint(L, 3);
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "proxyId")) break;
      self->proxyId = luaL_checkint(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2FixtureProxy__get_(lua_State *L) {

  b2FixtureProxy *self = *((b2FixtureProxy **)dub_checksdata_n(L, 1, "b2.FixtureProxy", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 10);
  switch(key_h) {
    case 6: {
      if (DUB_ASSERT_KEY(key, "aabb")) break;
      dub_pushudata(L, &self->aabb, "b2.AABB", false);
      return 1;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "fixture")) break;
      b2Fixture *retval__ = self->fixture;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "b2.Fixture", false);
      return 1;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "childIndex")) break;
      lua_pushnumber(L, self->childIndex);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "proxyId")) break;
      lua_pushnumber(L, self->proxyId);
      return 1;
    }
  }
  return 0;
}

/** b2FixtureProxy()
 * 
 */
static int b2FixtureProxy_b2FixtureProxy(lua_State *L) {
  try {
    b2FixtureProxy *retval__ = new b2FixtureProxy();
    dub_pushudata(L, retval__, "b2.FixtureProxy", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2FixtureProxy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2FixtureProxy: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2FixtureProxy___tostring(lua_State *L) {
  b2FixtureProxy *self = *((b2FixtureProxy **)dub_checksdata_n(L, 1, "b2.FixtureProxy"));
  lua_pushfstring(L, "b2.FixtureProxy: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2FixtureProxy_member_methods[] = {
  { "__newindex"   , b2FixtureProxy__set_ },
  { "__index"      , b2FixtureProxy__get_ },
  { "new"          , b2FixtureProxy_b2FixtureProxy },
  { "__tostring"   , b2FixtureProxy___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_FixtureProxy(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.FixtureProxy");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2FixtureProxy_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "FixtureProxy", "FixtureProxy");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
