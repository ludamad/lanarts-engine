/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2BodyDef
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/b2Body.h"


/** ~b2BodyDef()
 * 
 */
static int b2BodyDef__b2BodyDef(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.BodyDef"));
    if (userdata->gc) {
      b2BodyDef *self = (b2BodyDef *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2BodyDef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2BodyDef: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2BodyDef__set_(lua_State *L) {

  b2BodyDef *self = *((b2BodyDef **)dub_checksdata_n(L, 1, "b2.BodyDef"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 47);
  switch(key_h) {
    case 21: {
      if (DUB_ASSERT_KEY(key, "type")) break;
      self->type = (b2BodyType)luaL_checkint(L, 3);
      return 0;
    }
    case 7: {
      if (DUB_ASSERT_KEY(key, "position")) break;
      self->position = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 43: {
      if (DUB_ASSERT_KEY(key, "angle")) break;
      self->angle = luaL_checknumber(L, 3);
      return 0;
    }
    case 20: {
      if (DUB_ASSERT_KEY(key, "linearVelocity")) break;
      self->linearVelocity = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 18: {
      if (DUB_ASSERT_KEY(key, "angularVelocity")) break;
      self->angularVelocity = luaL_checknumber(L, 3);
      return 0;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "linearDamping")) break;
      self->linearDamping = luaL_checknumber(L, 3);
      return 0;
    }
    case 46: {
      if (DUB_ASSERT_KEY(key, "angularDamping")) break;
      self->angularDamping = luaL_checknumber(L, 3);
      return 0;
    }
    case 30: {
      if (DUB_ASSERT_KEY(key, "allowSleep")) break;
      self->allowSleep = luaL_checkboolean(L, 3);
      return 0;
    }
    case 32: {
      if (DUB_ASSERT_KEY(key, "awake")) break;
      self->awake = luaL_checkboolean(L, 3);
      return 0;
    }
    case 45: {
      if (DUB_ASSERT_KEY(key, "fixedRotation")) break;
      self->fixedRotation = luaL_checkboolean(L, 3);
      return 0;
    }
    case 25: {
      if (DUB_ASSERT_KEY(key, "bullet")) break;
      self->bullet = luaL_checkboolean(L, 3);
      return 0;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "active")) break;
      self->active = luaL_checkboolean(L, 3);
      return 0;
    }
    case 16: {
      if (DUB_ASSERT_KEY(key, "userData")) break;
      dub_protect(L, 1, 3, "userData");
      self->userData = *((void **)dub_checksdata_n(L, 3, "void"));
      return 0;
    }
    case 17: {
      if (DUB_ASSERT_KEY(key, "gravityScale")) break;
      self->gravityScale = luaL_checknumber(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2BodyDef__get_(lua_State *L) {

  b2BodyDef *self = *((b2BodyDef **)dub_checksdata_n(L, 1, "b2.BodyDef", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 47);
  switch(key_h) {
    case 21: {
      if (DUB_ASSERT_KEY(key, "type")) break;
      lua_pushnumber(L, self->type);
      return 1;
    }
    case 7: {
      if (DUB_ASSERT_KEY(key, "position")) break;
      dub_pushudata(L, &self->position, "b2.Vec2", false);
      return 1;
    }
    case 43: {
      if (DUB_ASSERT_KEY(key, "angle")) break;
      lua_pushnumber(L, self->angle);
      return 1;
    }
    case 20: {
      if (DUB_ASSERT_KEY(key, "linearVelocity")) break;
      dub_pushudata(L, &self->linearVelocity, "b2.Vec2", false);
      return 1;
    }
    case 18: {
      if (DUB_ASSERT_KEY(key, "angularVelocity")) break;
      lua_pushnumber(L, self->angularVelocity);
      return 1;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "linearDamping")) break;
      lua_pushnumber(L, self->linearDamping);
      return 1;
    }
    case 46: {
      if (DUB_ASSERT_KEY(key, "angularDamping")) break;
      lua_pushnumber(L, self->angularDamping);
      return 1;
    }
    case 30: {
      if (DUB_ASSERT_KEY(key, "allowSleep")) break;
      lua_pushboolean(L, self->allowSleep);
      return 1;
    }
    case 32: {
      if (DUB_ASSERT_KEY(key, "awake")) break;
      lua_pushboolean(L, self->awake);
      return 1;
    }
    case 45: {
      if (DUB_ASSERT_KEY(key, "fixedRotation")) break;
      lua_pushboolean(L, self->fixedRotation);
      return 1;
    }
    case 25: {
      if (DUB_ASSERT_KEY(key, "bullet")) break;
      lua_pushboolean(L, self->bullet);
      return 1;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "active")) break;
      lua_pushboolean(L, self->active);
      return 1;
    }
    case 16: {
      if (DUB_ASSERT_KEY(key, "userData")) break;
      void *retval__ = self->userData;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "void", false);
      return 1;
    }
    case 17: {
      if (DUB_ASSERT_KEY(key, "gravityScale")) break;
      lua_pushnumber(L, self->gravityScale);
      return 1;
    }
  }
  return 0;
}

/** b2BodyDef::b2BodyDef()
 * vendor/Box2D/Box2D/Dynamics/b2Body.h:55
 */
static int b2BodyDef_b2BodyDef(lua_State *L) {
  try {
    b2BodyDef *retval__ = new b2BodyDef();
    dub_pushudata(L, retval__, "b2.BodyDef", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2BodyDef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2BodyDef: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2BodyDef___tostring(lua_State *L) {
  b2BodyDef *self = *((b2BodyDef **)dub_checksdata_n(L, 1, "b2.BodyDef"));
  lua_pushfstring(L, "b2.BodyDef: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2BodyDef_member_methods[] = {
  { "__gc"         , b2BodyDef__b2BodyDef },
  { "__newindex"   , b2BodyDef__set_      },
  { "__index"      , b2BodyDef__get_      },
  { "new"          , b2BodyDef_b2BodyDef  },
  { "__tostring"   , b2BodyDef___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_BodyDef(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.BodyDef");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2BodyDef_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "BodyDef", "BodyDef");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
