/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2FixtureDef
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/b2Fixture.h"


/** ~b2FixtureDef()
 * 
 */
static int b2FixtureDef__b2FixtureDef(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.FixtureDef"));
    if (userdata->gc) {
      b2FixtureDef *self = (b2FixtureDef *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2FixtureDef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2FixtureDef: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2FixtureDef__set_(lua_State *L) {

  b2FixtureDef *self = *((b2FixtureDef **)dub_checksdata_n(L, 1, "b2.FixtureDef"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 17);
  switch(key_h) {
    case 9: {
      if (DUB_ASSERT_KEY(key, "shape")) break;
      dub_protect(L, 1, 3, "shape");
      self->shape = *((b2Shape **)dub_checksdata_n(L, 3, "b2.Shape"));
      return 0;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "userData")) break;
      dub_protect(L, 1, 3, "userData");
      self->userData = *((void **)dub_checksdata_n(L, 3, "void"));
      return 0;
    }
    case 6: {
      if (DUB_ASSERT_KEY(key, "friction")) break;
      self->friction = luaL_checknumber(L, 3);
      return 0;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "restitution")) break;
      self->restitution = luaL_checknumber(L, 3);
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "density")) break;
      self->density = luaL_checknumber(L, 3);
      return 0;
    }
    case 14: {
      if (DUB_ASSERT_KEY(key, "isSensor")) break;
      self->isSensor = luaL_checkboolean(L, 3);
      return 0;
    }
    case 13: {
      if (DUB_ASSERT_KEY(key, "filter")) break;
      self->filter = **((b2Filter **)dub_checksdata_n(L, 3, "b2.Filter"));
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2FixtureDef__get_(lua_State *L) {

  b2FixtureDef *self = *((b2FixtureDef **)dub_checksdata_n(L, 1, "b2.FixtureDef", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 17);
  switch(key_h) {
    case 9: {
      if (DUB_ASSERT_KEY(key, "shape")) break;
      const b2Shape *retval__ = self->shape;
      if (!retval__) return 0;
      dub_pushudata(L, const_cast<b2Shape*>(retval__), "b2.Shape", false);
      return 1;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "userData")) break;
      void *retval__ = self->userData;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "void", false);
      return 1;
    }
    case 6: {
      if (DUB_ASSERT_KEY(key, "friction")) break;
      lua_pushnumber(L, self->friction);
      return 1;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "restitution")) break;
      lua_pushnumber(L, self->restitution);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "density")) break;
      lua_pushnumber(L, self->density);
      return 1;
    }
    case 14: {
      if (DUB_ASSERT_KEY(key, "isSensor")) break;
      lua_pushboolean(L, self->isSensor);
      return 1;
    }
    case 13: {
      if (DUB_ASSERT_KEY(key, "filter")) break;
      dub_pushudata(L, &self->filter, "b2.Filter", false);
      return 1;
    }
  }
  return 0;
}

/** b2FixtureDef::b2FixtureDef()
 * vendor/Box2D/Box2D/Dynamics/b2Fixture.h:60
 */
static int b2FixtureDef_b2FixtureDef(lua_State *L) {
  try {
    b2FixtureDef *retval__ = new b2FixtureDef();
    dub_pushudata(L, retval__, "b2.FixtureDef", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2FixtureDef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2FixtureDef: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2FixtureDef___tostring(lua_State *L) {
  b2FixtureDef *self = *((b2FixtureDef **)dub_checksdata_n(L, 1, "b2.FixtureDef"));
  lua_pushfstring(L, "b2.FixtureDef: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2FixtureDef_member_methods[] = {
  { "__gc"         , b2FixtureDef__b2FixtureDef },
  { "__newindex"   , b2FixtureDef__set_   },
  { "__index"      , b2FixtureDef__get_   },
  { "new"          , b2FixtureDef_b2FixtureDef },
  { "__tostring"   , b2FixtureDef___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_FixtureDef(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.FixtureDef");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2FixtureDef_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "FixtureDef", "FixtureDef");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
