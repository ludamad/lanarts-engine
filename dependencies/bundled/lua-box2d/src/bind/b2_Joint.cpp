/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2Joint
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/Joints/b2Joint.h"


/** b2JointType b2Joint::GetType() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:109
 */
static int b2Joint_GetType(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:112
 */
static int b2Joint_GetBodyA(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:115
 */
static int b2Joint_GetBodyB(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub_error(L);
}

/** virtual b2Vec2 b2Joint::GetAnchorA() const =0
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:118
 */
static int b2Joint_GetAnchorA(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub_error(L);
}

/** virtual b2Vec2 b2Joint::GetAnchorB() const =0
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:121
 */
static int b2Joint_GetAnchorB(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub_error(L);
}

/** virtual b2Vec2 b2Joint::GetReactionForce(float32 inv_dt) const =0
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:124
 */
static int b2Joint_GetReactionForce(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    float32 inv_dt = dub_checknumber(L, 2);
    dub_pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub_error(L);
}

/** virtual float32 b2Joint::GetReactionTorque(float32 inv_dt) const =0
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:127
 */
static int b2Joint_GetReactionTorque(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    float32 inv_dt = dub_checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint * b2Joint::GetNext()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:130
 */
static int b2Joint_GetNext(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub_error(L);
}

/** void * b2Joint::GetUserData() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:134
 */
static int b2Joint_GetUserData(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** void b2Joint::SetUserData(void *data)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:137
 */
static int b2Joint_SetUserData(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    void *data = *((void **)dub_checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::IsActive() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:140
 */
static int b2Joint_IsActive(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:145
 */
static int b2Joint_GetCollideConnected(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void b2Joint::Dump()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:148
 */
static int b2Joint_Dump(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void b2Joint::ShiftOrigin(const b2Vec2 &newOrigin)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:151
 */
static int b2Joint_ShiftOrigin(lua_State *L) {
  try {
    b2Joint *self = *((b2Joint **)dub_checksdata(L, 1, "b2.Joint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2Joint___tostring(lua_State *L) {
  b2Joint *self = *((b2Joint **)dub_checksdata_n(L, 1, "b2.Joint"));
  lua_pushfstring(L, "b2.Joint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2Joint_member_methods[] = {
  { "GetType"      , b2Joint_GetType      },
  { "GetBodyA"     , b2Joint_GetBodyA     },
  { "GetBodyB"     , b2Joint_GetBodyB     },
  { "GetAnchorA"   , b2Joint_GetAnchorA   },
  { "GetAnchorB"   , b2Joint_GetAnchorB   },
  { "GetReactionForce", b2Joint_GetReactionForce },
  { "GetReactionTorque", b2Joint_GetReactionTorque },
  { "GetNext"      , b2Joint_GetNext      },
  { "GetUserData"  , b2Joint_GetUserData  },
  { "SetUserData"  , b2Joint_SetUserData  },
  { "IsActive"     , b2Joint_IsActive     },
  { "GetCollideConnected", b2Joint_GetCollideConnected },
  { "Dump"         , b2Joint_Dump         },
  { "ShiftOrigin"  , b2Joint_ShiftOrigin  },
  { "__tostring"   , b2Joint___tostring   },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_Joint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.Joint");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2Joint_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "Joint", "Joint");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
