/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2FrictionJoint
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/Joints/b2FrictionJoint.h"


/** ~b2FrictionJoint()
 * 
 */
static int b2FrictionJoint__b2FrictionJoint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.FrictionJoint"));
    if (userdata->gc) {
      b2FrictionJoint *self = (b2FrictionJoint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2FrictionJoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2FrictionJoint: Unknown exception");
  }
  return dub_error(L);
}

/** Cast (class_name)
 * 
 */
static int b2FrictionJoint__cast_(lua_State *L) {

  b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata_n(L, 1, "b2.FrictionJoint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.Joint")) break;
      *retval__ = static_cast<b2Joint *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2Vec2 b2FrictionJoint::GetAnchorA() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:58
 */
static int b2FrictionJoint_GetAnchorA(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2FrictionJoint::GetAnchorB() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:59
 */
static int b2FrictionJoint_GetAnchorB(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2FrictionJoint::GetReactionForce(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:61
 */
static int b2FrictionJoint_GetReactionForce(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    dub_pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2FrictionJoint::GetReactionTorque(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:62
 */
static int b2FrictionJoint_GetReactionTorque(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub_error(L);
}

/** const b2Vec2& b2FrictionJoint::GetLocalAnchorA() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:65
 */
static int b2FrictionJoint_GetLocalAnchorA(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    dub_pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorA()), "b2.Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorA: Unknown exception");
  }
  return dub_error(L);
}

/** const b2Vec2& b2FrictionJoint::GetLocalAnchorB() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:68
 */
static int b2FrictionJoint_GetLocalAnchorB(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    dub_pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorB()), "b2.Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorB: Unknown exception");
  }
  return dub_error(L);
}

/** void b2FrictionJoint::SetMaxForce(float32 force)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:71
 */
static int b2FrictionJoint_SetMaxForce(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    float32 force = dub_checknumber(L, 2);
    self->SetMaxForce(force);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMaxForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMaxForce: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2FrictionJoint::GetMaxForce() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:74
 */
static int b2FrictionJoint_GetMaxForce(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    lua_pushnumber(L, self->GetMaxForce());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMaxForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMaxForce: Unknown exception");
  }
  return dub_error(L);
}

/** void b2FrictionJoint::SetMaxTorque(float32 torque)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:77
 */
static int b2FrictionJoint_SetMaxTorque(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    float32 torque = dub_checknumber(L, 2);
    self->SetMaxTorque(torque);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMaxTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMaxTorque: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2FrictionJoint::GetMaxTorque() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:80
 */
static int b2FrictionJoint_GetMaxTorque(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    lua_pushnumber(L, self->GetMaxTorque());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMaxTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMaxTorque: Unknown exception");
  }
  return dub_error(L);
}

/** void b2FrictionJoint::Dump()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.h:83
 */
static int b2FrictionJoint_Dump(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub_error(L);
}

/** b2JointType b2Joint::GetType() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:109
 */
static int b2FrictionJoint_GetType(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:112
 */
static int b2FrictionJoint_GetBodyA(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:115
 */
static int b2FrictionJoint_GetBodyB(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint * b2Joint::GetNext()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:130
 */
static int b2FrictionJoint_GetNext(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub_error(L);
}

/** void * b2Joint::GetUserData() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:134
 */
static int b2FrictionJoint_GetUserData(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** void b2Joint::SetUserData(void *data)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:137
 */
static int b2FrictionJoint_SetUserData(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    void *data = *((void **)dub_checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::IsActive() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:140
 */
static int b2FrictionJoint_IsActive(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:145
 */
static int b2FrictionJoint_GetCollideConnected(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void b2Joint::ShiftOrigin(const b2Vec2 &newOrigin)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:151
 */
static int b2FrictionJoint_ShiftOrigin(lua_State *L) {
  try {
    b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata(L, 1, "b2.FrictionJoint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2FrictionJoint___tostring(lua_State *L) {
  b2FrictionJoint *self = *((b2FrictionJoint **)dub_checksdata_n(L, 1, "b2.FrictionJoint"));
  lua_pushfstring(L, "b2.FrictionJoint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2FrictionJoint_member_methods[] = {
  { "__gc"         , b2FrictionJoint__b2FrictionJoint },
  { "_cast_"       , b2FrictionJoint__cast_ },
  { "GetAnchorA"   , b2FrictionJoint_GetAnchorA },
  { "GetAnchorB"   , b2FrictionJoint_GetAnchorB },
  { "GetReactionForce", b2FrictionJoint_GetReactionForce },
  { "GetReactionTorque", b2FrictionJoint_GetReactionTorque },
  { "GetLocalAnchorA", b2FrictionJoint_GetLocalAnchorA },
  { "GetLocalAnchorB", b2FrictionJoint_GetLocalAnchorB },
  { "SetMaxForce"  , b2FrictionJoint_SetMaxForce },
  { "GetMaxForce"  , b2FrictionJoint_GetMaxForce },
  { "SetMaxTorque" , b2FrictionJoint_SetMaxTorque },
  { "GetMaxTorque" , b2FrictionJoint_GetMaxTorque },
  { "Dump"         , b2FrictionJoint_Dump },
  { "GetType"      , b2FrictionJoint_GetType },
  { "GetBodyA"     , b2FrictionJoint_GetBodyA },
  { "GetBodyB"     , b2FrictionJoint_GetBodyB },
  { "GetNext"      , b2FrictionJoint_GetNext },
  { "GetUserData"  , b2FrictionJoint_GetUserData },
  { "SetUserData"  , b2FrictionJoint_SetUserData },
  { "IsActive"     , b2FrictionJoint_IsActive },
  { "GetCollideConnected", b2FrictionJoint_GetCollideConnected },
  { "ShiftOrigin"  , b2FrictionJoint_ShiftOrigin },
  { "__tostring"   , b2FrictionJoint___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_FrictionJoint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.FrictionJoint");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2FrictionJoint_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "FrictionJoint", "FrictionJoint");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
