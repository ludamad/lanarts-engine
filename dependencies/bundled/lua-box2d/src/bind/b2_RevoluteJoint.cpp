/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2RevoluteJoint
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/Joints/b2RevoluteJoint.h"


/** ~b2RevoluteJoint()
 * 
 */
static int b2RevoluteJoint__b2RevoluteJoint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.RevoluteJoint"));
    if (userdata->gc) {
      b2RevoluteJoint *self = (b2RevoluteJoint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2RevoluteJoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2RevoluteJoint: Unknown exception");
  }
  return dub_error(L);
}

/** Cast (class_name)
 * 
 */
static int b2RevoluteJoint__cast_(lua_State *L) {

  b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata_n(L, 1, "b2.RevoluteJoint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.Joint")) break;
      *retval__ = static_cast<b2Joint *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2Vec2 b2RevoluteJoint::GetAnchorA() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:93
 */
static int b2RevoluteJoint_GetAnchorA(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2RevoluteJoint::GetAnchorB() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:94
 */
static int b2RevoluteJoint_GetAnchorB(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    dub_pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub_error(L);
}

/** const b2Vec2& b2RevoluteJoint::GetLocalAnchorA() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:97
 */
static int b2RevoluteJoint_GetLocalAnchorA(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    dub_pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorA()), "b2.Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorA: Unknown exception");
  }
  return dub_error(L);
}

/** const b2Vec2& b2RevoluteJoint::GetLocalAnchorB() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:100
 */
static int b2RevoluteJoint_GetLocalAnchorB(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    dub_pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorB()), "b2.Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorB: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetReferenceAngle() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:103
 */
static int b2RevoluteJoint_GetReferenceAngle(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushnumber(L, self->GetReferenceAngle());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReferenceAngle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReferenceAngle: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetJointAngle() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:106
 */
static int b2RevoluteJoint_GetJointAngle(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushnumber(L, self->GetJointAngle());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJointAngle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJointAngle: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetJointSpeed() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:109
 */
static int b2RevoluteJoint_GetJointSpeed(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushnumber(L, self->GetJointSpeed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJointSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJointSpeed: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2RevoluteJoint::IsLimitEnabled() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:112
 */
static int b2RevoluteJoint_IsLimitEnabled(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushboolean(L, self->IsLimitEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsLimitEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsLimitEnabled: Unknown exception");
  }
  return dub_error(L);
}

/** void b2RevoluteJoint::EnableLimit(bool flag)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:115
 */
static int b2RevoluteJoint_EnableLimit(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    bool flag = dub_checkboolean(L, 2);
    self->EnableLimit(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "EnableLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "EnableLimit: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetLowerLimit() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:118
 */
static int b2RevoluteJoint_GetLowerLimit(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushnumber(L, self->GetLowerLimit());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLowerLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLowerLimit: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetUpperLimit() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:121
 */
static int b2RevoluteJoint_GetUpperLimit(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushnumber(L, self->GetUpperLimit());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUpperLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUpperLimit: Unknown exception");
  }
  return dub_error(L);
}

/** void b2RevoluteJoint::SetLimits(float32 lower, float32 upper)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:124
 */
static int b2RevoluteJoint_SetLimits(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    float32 lower = dub_checknumber(L, 2);
    float32 upper = dub_checknumber(L, 3);
    self->SetLimits(lower, upper);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetLimits: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetLimits: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2RevoluteJoint::IsMotorEnabled() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:127
 */
static int b2RevoluteJoint_IsMotorEnabled(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushboolean(L, self->IsMotorEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsMotorEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsMotorEnabled: Unknown exception");
  }
  return dub_error(L);
}

/** void b2RevoluteJoint::EnableMotor(bool flag)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:130
 */
static int b2RevoluteJoint_EnableMotor(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    bool flag = dub_checkboolean(L, 2);
    self->EnableMotor(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "EnableMotor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "EnableMotor: Unknown exception");
  }
  return dub_error(L);
}

/** void b2RevoluteJoint::SetMotorSpeed(float32 speed)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:133
 */
static int b2RevoluteJoint_SetMotorSpeed(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    float32 speed = dub_checknumber(L, 2);
    self->SetMotorSpeed(speed);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMotorSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMotorSpeed: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetMotorSpeed() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:136
 */
static int b2RevoluteJoint_GetMotorSpeed(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushnumber(L, self->GetMotorSpeed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMotorSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMotorSpeed: Unknown exception");
  }
  return dub_error(L);
}

/** void b2RevoluteJoint::SetMaxMotorTorque(float32 torque)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:139
 */
static int b2RevoluteJoint_SetMaxMotorTorque(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    float32 torque = dub_checknumber(L, 2);
    self->SetMaxMotorTorque(torque);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMaxMotorTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMaxMotorTorque: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetMaxMotorTorque() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:140
 */
static int b2RevoluteJoint_GetMaxMotorTorque(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushnumber(L, self->GetMaxMotorTorque());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMaxMotorTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMaxMotorTorque: Unknown exception");
  }
  return dub_error(L);
}

/** b2Vec2 b2RevoluteJoint::GetReactionForce(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:144
 */
static int b2RevoluteJoint_GetReactionForce(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    dub_pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetReactionTorque(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:148
 */
static int b2RevoluteJoint_GetReactionTorque(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2RevoluteJoint::GetMotorTorque(float32 inv_dt) const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:152
 */
static int b2RevoluteJoint_GetMotorTorque(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    float32 inv_dt = dub_checknumber(L, 2);
    lua_pushnumber(L, self->GetMotorTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMotorTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMotorTorque: Unknown exception");
  }
  return dub_error(L);
}

/** void b2RevoluteJoint::Dump()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.h:155
 */
static int b2RevoluteJoint_Dump(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub_error(L);
}

/** b2JointType b2Joint::GetType() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:109
 */
static int b2RevoluteJoint_GetType(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:112
 */
static int b2RevoluteJoint_GetBodyA(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub_error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:115
 */
static int b2RevoluteJoint_GetBodyB(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub_error(L);
}

/** b2Joint * b2Joint::GetNext()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:130
 */
static int b2RevoluteJoint_GetNext(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "b2.Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub_error(L);
}

/** void * b2Joint::GetUserData() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:134
 */
static int b2RevoluteJoint_GetUserData(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** void b2Joint::SetUserData(void *data)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:137
 */
static int b2RevoluteJoint_SetUserData(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    void *data = *((void **)dub_checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::IsActive() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:140
 */
static int b2RevoluteJoint_IsActive(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:145
 */
static int b2RevoluteJoint_GetCollideConnected(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void b2Joint::ShiftOrigin(const b2Vec2 &newOrigin)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:151
 */
static int b2RevoluteJoint_ShiftOrigin(lua_State *L) {
  try {
    b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata(L, 1, "b2.RevoluteJoint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2RevoluteJoint___tostring(lua_State *L) {
  b2RevoluteJoint *self = *((b2RevoluteJoint **)dub_checksdata_n(L, 1, "b2.RevoluteJoint"));
  lua_pushfstring(L, "b2.RevoluteJoint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2RevoluteJoint_member_methods[] = {
  { "__gc"         , b2RevoluteJoint__b2RevoluteJoint },
  { "_cast_"       , b2RevoluteJoint__cast_ },
  { "GetAnchorA"   , b2RevoluteJoint_GetAnchorA },
  { "GetAnchorB"   , b2RevoluteJoint_GetAnchorB },
  { "GetLocalAnchorA", b2RevoluteJoint_GetLocalAnchorA },
  { "GetLocalAnchorB", b2RevoluteJoint_GetLocalAnchorB },
  { "GetReferenceAngle", b2RevoluteJoint_GetReferenceAngle },
  { "GetJointAngle", b2RevoluteJoint_GetJointAngle },
  { "GetJointSpeed", b2RevoluteJoint_GetJointSpeed },
  { "IsLimitEnabled", b2RevoluteJoint_IsLimitEnabled },
  { "EnableLimit"  , b2RevoluteJoint_EnableLimit },
  { "GetLowerLimit", b2RevoluteJoint_GetLowerLimit },
  { "GetUpperLimit", b2RevoluteJoint_GetUpperLimit },
  { "SetLimits"    , b2RevoluteJoint_SetLimits },
  { "IsMotorEnabled", b2RevoluteJoint_IsMotorEnabled },
  { "EnableMotor"  , b2RevoluteJoint_EnableMotor },
  { "SetMotorSpeed", b2RevoluteJoint_SetMotorSpeed },
  { "GetMotorSpeed", b2RevoluteJoint_GetMotorSpeed },
  { "SetMaxMotorTorque", b2RevoluteJoint_SetMaxMotorTorque },
  { "GetMaxMotorTorque", b2RevoluteJoint_GetMaxMotorTorque },
  { "GetReactionForce", b2RevoluteJoint_GetReactionForce },
  { "GetReactionTorque", b2RevoluteJoint_GetReactionTorque },
  { "GetMotorTorque", b2RevoluteJoint_GetMotorTorque },
  { "Dump"         , b2RevoluteJoint_Dump },
  { "GetType"      , b2RevoluteJoint_GetType },
  { "GetBodyA"     , b2RevoluteJoint_GetBodyA },
  { "GetBodyB"     , b2RevoluteJoint_GetBodyB },
  { "GetNext"      , b2RevoluteJoint_GetNext },
  { "GetUserData"  , b2RevoluteJoint_GetUserData },
  { "SetUserData"  , b2RevoluteJoint_SetUserData },
  { "IsActive"     , b2RevoluteJoint_IsActive },
  { "GetCollideConnected", b2RevoluteJoint_GetCollideConnected },
  { "ShiftOrigin"  , b2RevoluteJoint_ShiftOrigin },
  { "__tostring"   , b2RevoluteJoint___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_RevoluteJoint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.RevoluteJoint");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2RevoluteJoint_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "RevoluteJoint", "RevoluteJoint");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
