/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2ContactFeature
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Collision/b2Collision.h"


/** Set attributes (key, value)
 * 
 */
static int b2ContactFeature__set_(lua_State *L) {

  b2ContactFeature *self = *((b2ContactFeature **)dub_checksdata_n(L, 1, "b2.ContactFeature"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 7);
  switch(key_h) {
    case 5: {
      if (DUB_ASSERT_KEY(key, "indexA")) break;
      self->indexA = luaL_checkint(L, 3);
      return 0;
    }
    case 6: {
      if (DUB_ASSERT_KEY(key, "indexB")) break;
      self->indexB = luaL_checkint(L, 3);
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "typeA")) break;
      self->typeA = luaL_checkint(L, 3);
      return 0;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "typeB")) break;
      self->typeB = luaL_checkint(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2ContactFeature__get_(lua_State *L) {

  b2ContactFeature *self = *((b2ContactFeature **)dub_checksdata_n(L, 1, "b2.ContactFeature", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 7);
  switch(key_h) {
    case 5: {
      if (DUB_ASSERT_KEY(key, "indexA")) break;
      lua_pushnumber(L, self->indexA);
      return 1;
    }
    case 6: {
      if (DUB_ASSERT_KEY(key, "indexB")) break;
      lua_pushnumber(L, self->indexB);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "typeA")) break;
      lua_pushnumber(L, self->typeA);
      return 1;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "typeB")) break;
      lua_pushnumber(L, self->typeB);
      return 1;
    }
  }
  return 0;
}

/** b2ContactFeature()
 * 
 */
static int b2ContactFeature_b2ContactFeature(lua_State *L) {
  try {
    b2ContactFeature *retval__ = new b2ContactFeature();
    dub_pushudata(L, retval__, "b2.ContactFeature", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2ContactFeature: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2ContactFeature: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2ContactFeature___tostring(lua_State *L) {
  b2ContactFeature *self = *((b2ContactFeature **)dub_checksdata_n(L, 1, "b2.ContactFeature"));
  lua_pushfstring(L, "b2.ContactFeature: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2ContactFeature_member_methods[] = {
  { "__newindex"   , b2ContactFeature__set_ },
  { "__index"      , b2ContactFeature__get_ },
  { "new"          , b2ContactFeature_b2ContactFeature },
  { "__tostring"   , b2ContactFeature___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub_const_Reg b2ContactFeature_const[] = {
  { "e_vertex"     , b2ContactFeature::e_vertex },
  { "e_face"       , b2ContactFeature::e_face },
  { NULL, 0},
};

extern "C" int luaopen_b2_ContactFeature(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.ContactFeature");
  // <mt>
  // register class constants
  dub_register_const(L, b2ContactFeature_const);

  // register member methods
  luaL_register(L, NULL, b2ContactFeature_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "ContactFeature", "ContactFeature");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
