/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2DynamicTree
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Collision/b2DynamicTree.h"


/** b2DynamicTree::b2DynamicTree()
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:65
 */
static int b2DynamicTree_b2DynamicTree(lua_State *L) {
  try {
    b2DynamicTree *retval__ = new b2DynamicTree();
    dub_pushudata(L, retval__, "b2.DynamicTree", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2DynamicTree: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2DynamicTree: Unknown exception");
  }
  return dub_error(L);
}

/** b2DynamicTree::~b2DynamicTree()
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:68
 */
static int b2DynamicTree__b2DynamicTree(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.DynamicTree"));
    if (userdata->gc) {
      b2DynamicTree *self = (b2DynamicTree *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2DynamicTree: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2DynamicTree: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2DynamicTree::CreateProxy(const b2AABB &aabb, void *userData)
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:71
 */
static int b2DynamicTree_CreateProxy(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    b2AABB *aabb = *((b2AABB **)dub_checksdata(L, 2, "b2.AABB"));
    void *userData = *((void **)dub_checksdata(L, 3, "void"));
    lua_pushnumber(L, self->CreateProxy(*aabb, userData));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "CreateProxy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "CreateProxy: Unknown exception");
  }
  return dub_error(L);
}

/** void b2DynamicTree::DestroyProxy(int32 proxyId)
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:74
 */
static int b2DynamicTree_DestroyProxy(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    int32 proxyId = dub_checkint(L, 2);
    self->DestroyProxy(proxyId);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DestroyProxy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DestroyProxy: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2DynamicTree::MoveProxy(int32 proxyId, const b2AABB &aabb1, const b2Vec2 &displacement)
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:80
 */
static int b2DynamicTree_MoveProxy(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    int32 proxyId = dub_checkint(L, 2);
    b2AABB *aabb1 = *((b2AABB **)dub_checksdata(L, 3, "b2.AABB"));
    b2Vec2 *displacement = *((b2Vec2 **)dub_checksdata(L, 4, "b2.Vec2"));
    lua_pushboolean(L, self->MoveProxy(proxyId, *aabb1, *displacement));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "MoveProxy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "MoveProxy: Unknown exception");
  }
  return dub_error(L);
}

/** void * b2DynamicTree::GetUserData(int32 proxyId) const
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:84
 */
static int b2DynamicTree_GetUserData(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    int32 proxyId = dub_checkint(L, 2);
    self->GetUserData(proxyId);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub_error(L);
}

/** const b2AABB & b2DynamicTree::GetFatAABB(int32 proxyId) const
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:87
 */
static int b2DynamicTree_GetFatAABB(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    int32 proxyId = dub_checkint(L, 2);
    dub_pushudata(L, const_cast<b2AABB*>(&self->GetFatAABB(proxyId)), "b2.AABB", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetFatAABB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetFatAABB: Unknown exception");
  }
  return dub_error(L);
}

/** void b2DynamicTree::Validate() const
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:105
 */
static int b2DynamicTree_Validate(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    self->Validate();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Validate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Validate: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2DynamicTree::GetHeight() const
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:109
 */
static int b2DynamicTree_GetHeight(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    lua_pushnumber(L, self->GetHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetHeight: Unknown exception");
  }
  return dub_error(L);
}

/** int32 b2DynamicTree::GetMaxBalance() const
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:113
 */
static int b2DynamicTree_GetMaxBalance(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    lua_pushnumber(L, self->GetMaxBalance());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMaxBalance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMaxBalance: Unknown exception");
  }
  return dub_error(L);
}

/** float32 b2DynamicTree::GetAreaRatio() const
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:116
 */
static int b2DynamicTree_GetAreaRatio(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    lua_pushnumber(L, self->GetAreaRatio());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAreaRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAreaRatio: Unknown exception");
  }
  return dub_error(L);
}

/** void b2DynamicTree::RebuildBottomUp()
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:119
 */
static int b2DynamicTree_RebuildBottomUp(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    self->RebuildBottomUp();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "RebuildBottomUp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "RebuildBottomUp: Unknown exception");
  }
  return dub_error(L);
}

/** void b2DynamicTree::ShiftOrigin(const b2Vec2 &newOrigin)
 * vendor/Box2D/Box2D/Collision/b2DynamicTree.h:124
 */
static int b2DynamicTree_ShiftOrigin(lua_State *L) {
  try {
    b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata(L, 1, "b2.DynamicTree"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2DynamicTree___tostring(lua_State *L) {
  b2DynamicTree *self = *((b2DynamicTree **)dub_checksdata_n(L, 1, "b2.DynamicTree"));
  lua_pushfstring(L, "b2.DynamicTree: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2DynamicTree_member_methods[] = {
  { "new"          , b2DynamicTree_b2DynamicTree },
  { "__gc"         , b2DynamicTree__b2DynamicTree },
  { "CreateProxy"  , b2DynamicTree_CreateProxy },
  { "DestroyProxy" , b2DynamicTree_DestroyProxy },
  { "MoveProxy"    , b2DynamicTree_MoveProxy },
  { "GetUserData"  , b2DynamicTree_GetUserData },
  { "GetFatAABB"   , b2DynamicTree_GetFatAABB },
  { "Validate"     , b2DynamicTree_Validate },
  { "GetHeight"    , b2DynamicTree_GetHeight },
  { "GetMaxBalance", b2DynamicTree_GetMaxBalance },
  { "GetAreaRatio" , b2DynamicTree_GetAreaRatio },
  { "RebuildBottomUp", b2DynamicTree_RebuildBottomUp },
  { "ShiftOrigin"  , b2DynamicTree_ShiftOrigin },
  { "__tostring"   , b2DynamicTree___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_DynamicTree(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.DynamicTree");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2DynamicTree_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "DynamicTree", "DynamicTree");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
