/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2PulleyJointDef
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/Joints/b2PulleyJoint.h"


/** ~b2PulleyJointDef()
 * 
 */
static int b2PulleyJointDef__b2PulleyJointDef(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.PulleyJointDef"));
    if (userdata->gc) {
      b2PulleyJointDef *self = (b2PulleyJointDef *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2PulleyJointDef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2PulleyJointDef: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2PulleyJointDef__set_(lua_State *L) {

  b2PulleyJointDef *self = *((b2PulleyJointDef **)dub_checksdata_n(L, 1, "b2.PulleyJointDef"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 40);
  switch(key_h) {
    case 37: {
      if (DUB_ASSERT_KEY(key, "groundAnchorA")) break;
      self->groundAnchorA = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 38: {
      if (DUB_ASSERT_KEY(key, "groundAnchorB")) break;
      self->groundAnchorB = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 9: {
      if (DUB_ASSERT_KEY(key, "localAnchorA")) break;
      self->localAnchorA = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 10: {
      if (DUB_ASSERT_KEY(key, "localAnchorB")) break;
      self->localAnchorB = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 11: {
      if (DUB_ASSERT_KEY(key, "lengthA")) break;
      self->lengthA = luaL_checknumber(L, 3);
      return 0;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "lengthB")) break;
      self->lengthB = luaL_checknumber(L, 3);
      return 0;
    }
    case 27: {
      if (DUB_ASSERT_KEY(key, "ratio")) break;
      self->ratio = luaL_checknumber(L, 3);
      return 0;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "type")) break;
      self->type = (b2JointType)luaL_checkint(L, 3);
      return 0;
    }
    case 29: {
      if (DUB_ASSERT_KEY(key, "userData")) break;
      dub_protect(L, 1, 3, "userData");
      self->userData = *((void **)dub_checksdata_n(L, 3, "void"));
      return 0;
    }
    case 39: {
      if (DUB_ASSERT_KEY(key, "bodyA")) break;
      dub_protect(L, 1, 3, "bodyA");
      self->bodyA = *((b2Body **)dub_checksdata_n(L, 3, "b2.Body"));
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "bodyB")) break;
      dub_protect(L, 1, 3, "bodyB");
      self->bodyB = *((b2Body **)dub_checksdata_n(L, 3, "b2.Body"));
      return 0;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "collideConnected")) break;
      self->collideConnected = luaL_checkboolean(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2PulleyJointDef__get_(lua_State *L) {

  b2PulleyJointDef *self = *((b2PulleyJointDef **)dub_checksdata_n(L, 1, "b2.PulleyJointDef", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 40);
  switch(key_h) {
    case 37: {
      if (DUB_ASSERT_KEY(key, "groundAnchorA")) break;
      dub_pushudata(L, &self->groundAnchorA, "b2.Vec2", false);
      return 1;
    }
    case 38: {
      if (DUB_ASSERT_KEY(key, "groundAnchorB")) break;
      dub_pushudata(L, &self->groundAnchorB, "b2.Vec2", false);
      return 1;
    }
    case 9: {
      if (DUB_ASSERT_KEY(key, "localAnchorA")) break;
      dub_pushudata(L, &self->localAnchorA, "b2.Vec2", false);
      return 1;
    }
    case 10: {
      if (DUB_ASSERT_KEY(key, "localAnchorB")) break;
      dub_pushudata(L, &self->localAnchorB, "b2.Vec2", false);
      return 1;
    }
    case 11: {
      if (DUB_ASSERT_KEY(key, "lengthA")) break;
      lua_pushnumber(L, self->lengthA);
      return 1;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "lengthB")) break;
      lua_pushnumber(L, self->lengthB);
      return 1;
    }
    case 27: {
      if (DUB_ASSERT_KEY(key, "ratio")) break;
      lua_pushnumber(L, self->ratio);
      return 1;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "type")) break;
      lua_pushnumber(L, self->type);
      return 1;
    }
    case 29: {
      if (DUB_ASSERT_KEY(key, "userData")) break;
      void *retval__ = self->userData;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "void", false);
      return 1;
    }
    case 39: {
      if (DUB_ASSERT_KEY(key, "bodyA")) break;
      b2Body *retval__ = self->bodyA;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "b2.Body", false);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "bodyB")) break;
      b2Body *retval__ = self->bodyB;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "b2.Body", false);
      return 1;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "collideConnected")) break;
      lua_pushboolean(L, self->collideConnected);
      return 1;
    }
  }
  return 0;
}

/** Cast (class_name)
 * 
 */
static int b2PulleyJointDef__cast_(lua_State *L) {

  b2PulleyJointDef *self = *((b2PulleyJointDef **)dub_checksdata_n(L, 1, "b2.PulleyJointDef"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "b2.JointDef")) break;
      *retval__ = static_cast<b2JointDef *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2PulleyJointDef::b2PulleyJointDef()
 * vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:31
 */
static int b2PulleyJointDef_b2PulleyJointDef(lua_State *L) {
  try {
    b2PulleyJointDef *retval__ = new b2PulleyJointDef();
    dub_pushudata(L, retval__, "b2.PulleyJointDef", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2PulleyJointDef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2PulleyJointDef: Unknown exception");
  }
  return dub_error(L);
}

/** void b2PulleyJointDef::Initialize(b2Body *bodyA, b2Body *bodyB, const b2Vec2 &groundAnchorA, const b2Vec2 &groundAnchorB, const b2Vec2 &anchorA, const b2Vec2 &anchorB, float32 ratio)
 * vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:47
 */
static int b2PulleyJointDef_Initialize(lua_State *L) {
  try {
    b2PulleyJointDef *self = *((b2PulleyJointDef **)dub_checksdata(L, 1, "b2.PulleyJointDef"));
    b2Body *bodyA = *((b2Body **)dub_checksdata(L, 2, "b2.Body"));
    b2Body *bodyB = *((b2Body **)dub_checksdata(L, 3, "b2.Body"));
    b2Vec2 *groundAnchorA = *((b2Vec2 **)dub_checksdata(L, 4, "b2.Vec2"));
    b2Vec2 *groundAnchorB = *((b2Vec2 **)dub_checksdata(L, 5, "b2.Vec2"));
    b2Vec2 *anchorA = *((b2Vec2 **)dub_checksdata(L, 6, "b2.Vec2"));
    b2Vec2 *anchorB = *((b2Vec2 **)dub_checksdata(L, 7, "b2.Vec2"));
    float32 ratio = dub_checknumber(L, 8);
    self->Initialize(bodyA, bodyB, *groundAnchorA, *groundAnchorB, *anchorA, *anchorB, ratio);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Initialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Initialize: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2PulleyJointDef___tostring(lua_State *L) {
  b2PulleyJointDef *self = *((b2PulleyJointDef **)dub_checksdata_n(L, 1, "b2.PulleyJointDef"));
  lua_pushfstring(L, "b2.PulleyJointDef: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2PulleyJointDef_member_methods[] = {
  { "__gc"         , b2PulleyJointDef__b2PulleyJointDef },
  { "__newindex"   , b2PulleyJointDef__set_ },
  { "__index"      , b2PulleyJointDef__get_ },
  { "_cast_"       , b2PulleyJointDef__cast_ },
  { "new"          , b2PulleyJointDef_b2PulleyJointDef },
  { "Initialize"   , b2PulleyJointDef_Initialize },
  { "__tostring"   , b2PulleyJointDef___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_PulleyJointDef(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.PulleyJointDef");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2PulleyJointDef_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "PulleyJointDef", "PulleyJointDef");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
