/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2ContactManager
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/b2ContactManager.h"


/** ~b2ContactManager()
 * 
 */
static int b2ContactManager__b2ContactManager(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.ContactManager"));
    if (userdata->gc) {
      b2ContactManager *self = (b2ContactManager *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2ContactManager: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2ContactManager: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2ContactManager__set_(lua_State *L) {

  b2ContactManager *self = *((b2ContactManager **)dub_checksdata_n(L, 1, "b2.ContactManager"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 14);
  switch(key_h) {
    case 5: {
      if (DUB_ASSERT_KEY(key, "m_broadPhase")) break;
      self->m_broadPhase = **((b2BroadPhase **)dub_checksdata_n(L, 3, "b2.BroadPhase"));
      return 0;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "m_contactList")) break;
      dub_protect(L, 1, 3, "m_contactList");
      self->m_contactList = *((b2Contact **)dub_checksdata_n(L, 3, "Contact"));
      return 0;
    }
    case 13: {
      if (DUB_ASSERT_KEY(key, "m_contactCount")) break;
      self->m_contactCount = luaL_checkint(L, 3);
      return 0;
    }
    case 10: {
      if (DUB_ASSERT_KEY(key, "m_contactFilter")) break;
      dub_protect(L, 1, 3, "m_contactFilter");
      self->m_contactFilter = *((b2ContactFilter **)dub_checksdata_n(L, 3, "b2.ContactFilter"));
      return 0;
    }
    case 8: {
      if (DUB_ASSERT_KEY(key, "m_contactListener")) break;
      dub_protect(L, 1, 3, "m_contactListener");
      self->m_contactListener = *((b2ContactListener **)dub_checksdata_n(L, 3, "b2.ContactListener"));
      return 0;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "m_allocator")) break;
      dub_protect(L, 1, 3, "m_allocator");
      self->m_allocator = *((b2BlockAllocator **)dub_checksdata_n(L, 3, "b2.BlockAllocator"));
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2ContactManager__get_(lua_State *L) {

  b2ContactManager *self = *((b2ContactManager **)dub_checksdata_n(L, 1, "b2.ContactManager", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 14);
  switch(key_h) {
    case 5: {
      if (DUB_ASSERT_KEY(key, "m_broadPhase")) break;
      dub_pushudata(L, &self->m_broadPhase, "b2.BroadPhase", false);
      return 1;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "m_contactList")) break;
      b2Contact *retval__ = self->m_contactList;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "Contact", false);
      return 1;
    }
    case 13: {
      if (DUB_ASSERT_KEY(key, "m_contactCount")) break;
      lua_pushnumber(L, self->m_contactCount);
      return 1;
    }
    case 10: {
      if (DUB_ASSERT_KEY(key, "m_contactFilter")) break;
      b2ContactFilter *retval__ = self->m_contactFilter;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "b2.ContactFilter", false);
      return 1;
    }
    case 8: {
      if (DUB_ASSERT_KEY(key, "m_contactListener")) break;
      b2ContactListener *retval__ = self->m_contactListener;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "b2.ContactListener", false);
      return 1;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "m_allocator")) break;
      b2BlockAllocator *retval__ = self->m_allocator;
      if (!retval__) return 0;
      dub_pushudata(L, retval__, "b2.BlockAllocator", false);
      return 1;
    }
  }
  return 0;
}

/** b2ContactManager::b2ContactManager()
 * vendor/Box2D/Box2D/Dynamics/b2ContactManager.h:33
 */
static int b2ContactManager_b2ContactManager(lua_State *L) {
  try {
    b2ContactManager *retval__ = new b2ContactManager();
    dub_pushudata(L, retval__, "b2.ContactManager", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2ContactManager: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2ContactManager: Unknown exception");
  }
  return dub_error(L);
}

/** void b2ContactManager::AddPair(void *proxyUserDataA, void *proxyUserDataB)
 * vendor/Box2D/Box2D/Dynamics/b2ContactManager.h:36
 */
static int b2ContactManager_AddPair(lua_State *L) {
  try {
    b2ContactManager *self = *((b2ContactManager **)dub_checksdata(L, 1, "b2.ContactManager"));
    void *proxyUserDataA = *((void **)dub_checksdata(L, 2, "void"));
    void *proxyUserDataB = *((void **)dub_checksdata(L, 3, "void"));
    self->AddPair(proxyUserDataA, proxyUserDataB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "AddPair: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "AddPair: Unknown exception");
  }
  return dub_error(L);
}

/** void b2ContactManager::FindNewContacts()
 * vendor/Box2D/Box2D/Dynamics/b2ContactManager.h:38
 */
static int b2ContactManager_FindNewContacts(lua_State *L) {
  try {
    b2ContactManager *self = *((b2ContactManager **)dub_checksdata(L, 1, "b2.ContactManager"));
    self->FindNewContacts();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "FindNewContacts: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "FindNewContacts: Unknown exception");
  }
  return dub_error(L);
}

/** void b2ContactManager::Destroy(b2Contact *c)
 * vendor/Box2D/Box2D/Dynamics/b2ContactManager.h:40
 */
static int b2ContactManager_Destroy(lua_State *L) {
  try {
    b2ContactManager *self = *((b2ContactManager **)dub_checksdata(L, 1, "b2.ContactManager"));
    b2Contact *c = *((b2Contact **)dub_checksdata(L, 2, "Contact"));
    self->Destroy(c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Destroy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Destroy: Unknown exception");
  }
  return dub_error(L);
}

/** void b2ContactManager::Collide()
 * vendor/Box2D/Box2D/Dynamics/b2ContactManager.h:42
 */
static int b2ContactManager_Collide(lua_State *L) {
  try {
    b2ContactManager *self = *((b2ContactManager **)dub_checksdata(L, 1, "b2.ContactManager"));
    self->Collide();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Collide: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Collide: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2ContactManager___tostring(lua_State *L) {
  b2ContactManager *self = *((b2ContactManager **)dub_checksdata_n(L, 1, "b2.ContactManager"));
  lua_pushfstring(L, "b2.ContactManager: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2ContactManager_member_methods[] = {
  { "__gc"         , b2ContactManager__b2ContactManager },
  { "__newindex"   , b2ContactManager__set_ },
  { "__index"      , b2ContactManager__get_ },
  { "new"          , b2ContactManager_b2ContactManager },
  { "AddPair"      , b2ContactManager_AddPair },
  { "FindNewContacts", b2ContactManager_FindNewContacts },
  { "Destroy"      , b2ContactManager_Destroy },
  { "Collide"      , b2ContactManager_Collide },
  { "__tostring"   , b2ContactManager___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_ContactManager(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.ContactManager");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2ContactManager_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "ContactManager", "ContactManager");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
