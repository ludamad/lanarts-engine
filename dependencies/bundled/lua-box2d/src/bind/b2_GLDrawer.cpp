/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2GLDrawer
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "b2GLDrawer.h"


/** Cast (class_name)
 * 
 */
static int b2GLDrawer__cast_(lua_State *L) {

  b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata_n(L, 1, "b2.GLDrawer"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.Draw")) break;
      *retval__ = static_cast<b2Draw *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2GLDrawer()
 * 
 */
static int b2GLDrawer_b2GLDrawer(lua_State *L) {
  try {
    b2GLDrawer *retval__ = new b2GLDrawer();
    dub_pushudata(L, retval__, "b2.GLDrawer", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2GLDrawer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2GLDrawer: Unknown exception");
  }
  return dub_error(L);
}

/** void b2GLDrawer::DrawPolygon(const b2Vec2 *vertices, int32 vertexCount, const b2Color &color)
 * include/b2GLDrawer.h:40
 */
static int b2GLDrawer_DrawPolygon(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    b2Vec2 *vertices = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    int32 vertexCount = dub_checkint(L, 3);
    b2Color *color = *((b2Color **)dub_checksdata(L, 4, "b2.Color"));
    self->DrawPolygon(vertices, vertexCount, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DrawPolygon: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DrawPolygon: Unknown exception");
  }
  return dub_error(L);
}

/** void b2GLDrawer::DrawSolidPolygon(const b2Vec2 *vertices, int32 vertexCount, const b2Color &color)
 * include/b2GLDrawer.h:44
 */
static int b2GLDrawer_DrawSolidPolygon(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    b2Vec2 *vertices = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    int32 vertexCount = dub_checkint(L, 3);
    b2Color *color = *((b2Color **)dub_checksdata(L, 4, "b2.Color"));
    self->DrawSolidPolygon(vertices, vertexCount, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DrawSolidPolygon: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DrawSolidPolygon: Unknown exception");
  }
  return dub_error(L);
}

/** void b2GLDrawer::DrawCircle(const b2Vec2 &center, float32 radius, const b2Color &color)
 * include/b2GLDrawer.h:48
 */
static int b2GLDrawer_DrawCircle(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    b2Vec2 *center = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    float32 radius = dub_checknumber(L, 3);
    b2Color *color = *((b2Color **)dub_checksdata(L, 4, "b2.Color"));
    self->DrawCircle(*center, radius, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DrawCircle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DrawCircle: Unknown exception");
  }
  return dub_error(L);
}

/** void b2GLDrawer::DrawSolidCircle(const b2Vec2 &center, float32 radius, const b2Vec2 &axis, const b2Color &color)
 * include/b2GLDrawer.h:53
 */
static int b2GLDrawer_DrawSolidCircle(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    b2Vec2 *center = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    float32 radius = dub_checknumber(L, 3);
    b2Vec2 *axis = *((b2Vec2 **)dub_checksdata(L, 4, "b2.Vec2"));
    b2Color *color = *((b2Color **)dub_checksdata(L, 5, "b2.Color"));
    self->DrawSolidCircle(*center, radius, *axis, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DrawSolidCircle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DrawSolidCircle: Unknown exception");
  }
  return dub_error(L);
}

/** void b2GLDrawer::DrawSegment(const b2Vec2 &p1, const b2Vec2 &p2, const b2Color &color)
 * include/b2GLDrawer.h:57
 */
static int b2GLDrawer_DrawSegment(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    b2Vec2 *p1 = *((b2Vec2 **)dub_checksdata(L, 2, "b2.Vec2"));
    b2Vec2 *p2 = *((b2Vec2 **)dub_checksdata(L, 3, "b2.Vec2"));
    b2Color *color = *((b2Color **)dub_checksdata(L, 4, "b2.Color"));
    self->DrawSegment(*p1, *p2, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DrawSegment: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DrawSegment: Unknown exception");
  }
  return dub_error(L);
}

/** void b2GLDrawer::DrawTransform(const b2Transform &xf)
 * include/b2GLDrawer.h:59
 */
static int b2GLDrawer_DrawTransform(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    b2Transform *xf = *((b2Transform **)dub_checksdata(L, 2, "b2.Transform"));
    self->DrawTransform(*xf);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "DrawTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "DrawTransform: Unknown exception");
  }
  return dub_error(L);
}

/** void b2Draw::SetFlags(uint32 flags)
 * vendor/Box2D/Box2D/Common/b2Draw.h:52
 */
static int b2GLDrawer_SetFlags(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    uint32 flags = dub_checkint(L, 2);
    self->SetFlags(flags);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetFlags: Unknown exception");
  }
  return dub_error(L);
}

/** uint32 b2Draw::GetFlags() const
 * vendor/Box2D/Box2D/Common/b2Draw.h:55
 */
static int b2GLDrawer_GetFlags(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    lua_pushnumber(L, self->GetFlags());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetFlags: Unknown exception");
  }
  return dub_error(L);
}

/** void b2Draw::AppendFlags(uint32 flags)
 * vendor/Box2D/Box2D/Common/b2Draw.h:58
 */
static int b2GLDrawer_AppendFlags(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    uint32 flags = dub_checkint(L, 2);
    self->AppendFlags(flags);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "AppendFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "AppendFlags: Unknown exception");
  }
  return dub_error(L);
}

/** void b2Draw::ClearFlags(uint32 flags)
 * vendor/Box2D/Box2D/Common/b2Draw.h:61
 */
static int b2GLDrawer_ClearFlags(lua_State *L) {
  try {
    b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata(L, 1, "b2.GLDrawer"));
    uint32 flags = dub_checkint(L, 2);
    self->ClearFlags(flags);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ClearFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ClearFlags: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2GLDrawer___tostring(lua_State *L) {
  b2GLDrawer *self = *((b2GLDrawer **)dub_checksdata_n(L, 1, "b2.GLDrawer"));
  lua_pushfstring(L, "b2.GLDrawer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2GLDrawer_member_methods[] = {
  { "_cast_"       , b2GLDrawer__cast_    },
  { "new"          , b2GLDrawer_b2GLDrawer },
  { "DrawPolygon"  , b2GLDrawer_DrawPolygon },
  { "DrawSolidPolygon", b2GLDrawer_DrawSolidPolygon },
  { "DrawCircle"   , b2GLDrawer_DrawCircle },
  { "DrawSolidCircle", b2GLDrawer_DrawSolidCircle },
  { "DrawSegment"  , b2GLDrawer_DrawSegment },
  { "DrawTransform", b2GLDrawer_DrawTransform },
  { "SetFlags"     , b2GLDrawer_SetFlags  },
  { "GetFlags"     , b2GLDrawer_GetFlags  },
  { "AppendFlags"  , b2GLDrawer_AppendFlags },
  { "ClearFlags"   , b2GLDrawer_ClearFlags },
  { "__tostring"   , b2GLDrawer___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_GLDrawer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.GLDrawer");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2GLDrawer_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "GLDrawer", "GLDrawer");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
