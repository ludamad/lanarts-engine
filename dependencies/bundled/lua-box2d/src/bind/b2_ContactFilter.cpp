/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2ContactFilter
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/b2WorldCallbacks.h"


/** b2ContactFilter()
 * 
 */
static int b2ContactFilter_b2ContactFilter(lua_State *L) {
  try {
    b2ContactFilter *retval__ = new b2ContactFilter();
    dub_pushudata(L, retval__, "b2.ContactFilter", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2ContactFilter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2ContactFilter: Unknown exception");
  }
  return dub_error(L);
}

/** virtual b2ContactFilter::~b2ContactFilter()
 * vendor/Box2D/Box2D/Dynamics/b2WorldCallbacks.h:55
 */
static int b2ContactFilter__b2ContactFilter(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.ContactFilter"));
    if (userdata->gc) {
      b2ContactFilter *self = (b2ContactFilter *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2ContactFilter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2ContactFilter: Unknown exception");
  }
  return dub_error(L);
}

/** bool b2ContactFilter::ShouldCollide(b2Fixture *fixtureA, b2Fixture *fixtureB)
 * vendor/Box2D/Box2D/Dynamics/b2WorldCallbacks.h:59
 */
static int b2ContactFilter_ShouldCollide(lua_State *L) {
  try {
    b2ContactFilter *self = *((b2ContactFilter **)dub_checksdata(L, 1, "b2.ContactFilter"));
    b2Fixture *fixtureA = *((b2Fixture **)dub_checksdata(L, 2, "b2.Fixture"));
    b2Fixture *fixtureB = *((b2Fixture **)dub_checksdata(L, 3, "b2.Fixture"));
    lua_pushboolean(L, self->ShouldCollide(fixtureA, fixtureB));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShouldCollide: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShouldCollide: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2ContactFilter___tostring(lua_State *L) {
  b2ContactFilter *self = *((b2ContactFilter **)dub_checksdata_n(L, 1, "b2.ContactFilter"));
  lua_pushfstring(L, "b2.ContactFilter: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2ContactFilter_member_methods[] = {
  { "new"          , b2ContactFilter_b2ContactFilter },
  { "__gc"         , b2ContactFilter__b2ContactFilter },
  { "ShouldCollide", b2ContactFilter_ShouldCollide },
  { "__tostring"   , b2ContactFilter___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_ContactFilter(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.ContactFilter");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2ContactFilter_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "ContactFilter", "ContactFilter");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
