/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2QueryCallback
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Dynamics/b2WorldCallbacks.h"


/** virtual b2QueryCallback::~b2QueryCallback()
 * vendor/Box2D/Box2D/Dynamics/b2WorldCallbacks.h:126
 */
static int b2QueryCallback__b2QueryCallback(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "b2.QueryCallback"));
    if (userdata->gc) {
      b2QueryCallback *self = (b2QueryCallback *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~b2QueryCallback: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~b2QueryCallback: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool b2QueryCallback::ReportFixture(b2Fixture *fixture)=0
 * vendor/Box2D/Box2D/Dynamics/b2WorldCallbacks.h:130
 */
static int b2QueryCallback_ReportFixture(lua_State *L) {
  try {
    b2QueryCallback *self = *((b2QueryCallback **)dub_checksdata(L, 1, "b2.QueryCallback"));
    b2Fixture *fixture = *((b2Fixture **)dub_checksdata(L, 2, "b2.Fixture"));
    lua_pushboolean(L, self->ReportFixture(fixture));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ReportFixture: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ReportFixture: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2QueryCallback___tostring(lua_State *L) {
  b2QueryCallback *self = *((b2QueryCallback **)dub_checksdata_n(L, 1, "b2.QueryCallback"));
  lua_pushfstring(L, "b2.QueryCallback: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2QueryCallback_member_methods[] = {
  { "__gc"         , b2QueryCallback__b2QueryCallback },
  { "ReportFixture", b2QueryCallback_ReportFixture },
  { "__tostring"   , b2QueryCallback___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_QueryCallback(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.QueryCallback");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2QueryCallback_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "QueryCallback", "QueryCallback");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
