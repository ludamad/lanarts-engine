/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2RayCastInput
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "Box2D/Collision/b2Collision.h"


/** Set attributes (key, value)
 * 
 */
static int b2RayCastInput__set_(lua_State *L) {

  b2RayCastInput *self = *((b2RayCastInput **)dub_checksdata_n(L, 1, "b2.RayCastInput"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 5);
  switch(key_h) {
    case 2: {
      if (DUB_ASSERT_KEY(key, "p1")) break;
      self->p1 = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "p2")) break;
      self->p2 = **((b2Vec2 **)dub_checksdata_n(L, 3, "b2.Vec2"));
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "maxFraction")) break;
      self->maxFraction = luaL_checknumber(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2RayCastInput__get_(lua_State *L) {

  b2RayCastInput *self = *((b2RayCastInput **)dub_checksdata_n(L, 1, "b2.RayCastInput", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 5);
  switch(key_h) {
    case 2: {
      if (DUB_ASSERT_KEY(key, "p1")) break;
      dub_pushudata(L, &self->p1, "b2.Vec2", false);
      return 1;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "p2")) break;
      dub_pushudata(L, &self->p2, "b2.Vec2", false);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "maxFraction")) break;
      lua_pushnumber(L, self->maxFraction);
      return 1;
    }
  }
  return 0;
}

/** b2RayCastInput()
 * 
 */
static int b2RayCastInput_b2RayCastInput(lua_State *L) {
  try {
    b2RayCastInput *retval__ = new b2RayCastInput();
    dub_pushudata(L, retval__, "b2.RayCastInput", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2RayCastInput: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2RayCastInput: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int b2RayCastInput___tostring(lua_State *L) {
  b2RayCastInput *self = *((b2RayCastInput **)dub_checksdata_n(L, 1, "b2.RayCastInput"));
  lua_pushfstring(L, "b2.RayCastInput: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2RayCastInput_member_methods[] = {
  { "__newindex"   , b2RayCastInput__set_ },
  { "__index"      , b2RayCastInput__get_ },
  { "new"          , b2RayCastInput_b2RayCastInput },
  { "__tostring"   , b2RayCastInput___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_b2_RayCastInput(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.RayCastInput");
  // <mt>

  // register member methods
  luaL_register(L, NULL, b2RayCastInput_member_methods);
  // save meta-table in b2
  dub_register(L, "b2", "RayCastInput", "RayCastInput");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
